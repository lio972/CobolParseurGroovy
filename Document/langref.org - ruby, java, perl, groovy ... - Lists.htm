
<!-- saved from url=(0038)http://langref.org/all-languages/lists -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"> 
<script src="./langref.org - ruby, java, perl, groovy ... - Lists_files/application.js" type="text/javascript"></script><style type="text/css"></style>
<link href="./langref.org - ruby, java, perl, groovy ... - Lists_files/style-languages.css" media="screen" rel="stylesheet" type="text/css">
<link href="./langref.org - ruby, java, perl, groovy ... - Lists_files/style.css" media="screen" rel="stylesheet" type="text/css">
<title>
langref.org - ruby, java, perl, groovy ... - Lists</title>
<style type="text/css">#yieldsquare-ad {
  margin:10px auto 20px;

  width: 728px;
}

#yieldsquare-about a {
  cursor: pointer;
}

.yieldsquare-enabled {
  border-radius:0 0 5px 5px;
  box-shadow: inset 0 0 75px 75px lightgray, 0 0 0 lightgray;
  -webkit-transition:opacity 1s linear;
}

.yieldsquare-disabled-first {
  -webkit-box-shadow: 1px 2px 3px rgba(0, 0, 0, 0.45);
  -webkit-transition: opacity 1s linear;
  background-image: url(http://s3.amazonaws.com/static.yieldsquare.com/ads-disabled/messagebed.gif);
  height: 90px;
  opacity: 1;
  position: relative;
  width: 728px;
}

.yieldsquare-disabled-second {
  -webkit-transition: all 0.4s ease-in-out;
  background-image: url(http://s3.amazonaws.com/static.yieldsquare.com/ads-disabled/messagebed.gif);
  border-radius:0 0 5px 5px;
  box-shadow: inset 0 0 35px 35px transparent, 0 0 75px 50px transparent;
  height: 90px;
  opacity: 0;
  position: relative;
  width: 728px;
}

#yieldsquare-about-ad {
  font:11px arial !important;
  color:#555;
  padding: 4px;
  text-align:center;
}

#yieldsquare-about-ad a {
  cursor: pointer;
  color: #333;
}

.yieldsquare-message-icon {
    position: absolute;
    top: 20px;
    left: 20px;
}

.yieldsquare-message-p {
    font: 13px/17px "Helvetica Neue", Arial, Helvetica, Geneva, sans-serif;
    width: 542px;
    height: 74px;
    left: 123px;
    position: absolute;
    top: 0px;
    color: #3d3d3d;
    margin-top: 13px;
    margin-bottom: 13px;
}

.yieldsquare-message-p span {
    font: bold 16px/17px "Helvetica Neue", Arial, Helvetica, Geneva, sans-serif;
    color: #292929;
}

.yieldsquare-message-p a {
    text-decoration: none;
    color: #1d97cf;
}

.yieldsquare-message-p a:hover {
    text-decoration: underline;
}

#yieldsquare-message-x {
    position: absolute;
    left: 715px;
    top: 6px;
}

</style></head> 
<body>
  <div id="header">
      <div class="box">
      <b class="rtop">
        <b class="r1"></b> <b class="r2"></b> <b class="r3"></b> <b class="r4"></b>
      </b>
      <div class="content">

    <div id="topright"> 
      <span id="login_box">
       
      <a href="http://langref.org/login">Login</a> 
      | 

      <a href="http://langref.org/signup">Signup</a> 
       
</span>
<span id="search">
    <form action="http://langref.org/all-languages/search" method="get">
      <input id="q" name="q" type="text" value="Search">
      <input name="s" type="submit" value="go">
    </form>
  </span>
    </div>
  <a href="http://langref.org/">langref.org</a>
  
    - 
    <a href="http://langref.org/ruby/lists">ruby</a>, <a href="http://langref.org/java/lists">java</a>, <a href="http://langref.org/perl/lists">perl</a>, <a href="http://langref.org/groovy/lists">groovy</a> ...
    
    
  
      </div>
      <b class="rbottom">
        <b class="r4"></b> <b class="r3"></b> <b class="r2"></b> <b class="r1"></b>
      </b>
    </div>

</div>
<div id="sidebar">
    <div class="box">
      <b class="rtop">
        <b class="r1"></b> <b class="r2"></b> <b class="r3"></b> <b class="r4"></b>
      </b>
      <div class="content">

  <ul>
    <li><a href="http://langref.org/all-languages">Home</a></li>
    <li><a href="http://langref.org/all-languages/all">All</a></li>
    <li><a href="http://langref.org/all-languages/solved">Solved</a></li>
    <li><a href="http://langref.org/all-languages/unsolved">Unsolved</a></li>
    
    <li><hr></li>   
    
    <li>
        <a href="http://langref.org/all-languages/strings">Strings</a>
    </li>
  
    <li>
        <a href="http://langref.org/all-languages/numbers">Numbers</a>
    </li>
  
    <li>
        <a href="http://langref.org/all-languages/pattern-matching">Regex</a>
    </li>
  
    <li>
        Lists
    </li>
  
    <li>
        <a href="http://langref.org/all-languages/maps">Maps</a>
    </li>
  
    <li>
        <a href="http://langref.org/all-languages/program-structure">Structure</a>
    </li>
  
    <li>
        <a href="http://langref.org/all-languages/files">Files</a>
    </li>
  
    <li>
        <a href="http://langref.org/all-languages/dates">Dates</a>
    </li>
  
    <li>
        <a href="http://langref.org/all-languages/oop">OOP</a>
    </li>
  
    <li>
        <a href="http://langref.org/all-languages/networking">Networking</a>
    </li>
  
    <li>
        <a href="http://langref.org/all-languages/xml">XML</a>
    </li>
  
    <li>
        <a href="http://langref.org/all-languages/algorithms">Algorithms</a>
    </li>
  
    <li>
        <a href="http://langref.org/all-languages/misc">Misc</a>
    </li>
  
    <li>
        <a href="http://langref.org/all-languages/parallel">Parallel</a>
    </li>
  
  </ul>
      </div>
      <b class="rbottom">
        <b class="r4"></b> <b class="r3"></b> <b class="r2"></b> <b class="r1"></b>
      </b>
    </div>

<br>
<div class="google_adsense ad160x600">
<script type="text/javascript">
//<![CDATA[
google_ad_client = 'pub-0165089109383292';
google_ad_width = 160;
google_ad_height = 600;
google_ad_type = 'text';
google_ad_format = '160x600_as';
google_language = 'en';
google_color_border = '666666';
google_color_bg = 'DDDDDD';
google_color_link = '0000FF';
google_color_url = '008800';
google_color_text = '000000';
google_ui_features  = 'rc:6';
//]]>
</script>
<script src="http://pagead2.googlesyndication.com/pagead/show_ads.js" type="text/javascript"></script>
</div>

</div>
<div id="main">
  
  <div id="title-short">
        <div class="box">
      <b class="rtop">
        <b class="r1"></b> <b class="r2"></b> <b class="r3"></b> <b class="r4"></b>
      </b>
      <div class="content">

  View Category
          </div>
      <b class="rbottom">
        <b class="r4"></b> <b class="r3"></b> <b class="r2"></b> <b class="r1"></b>
      </b>
    </div>

  </div>
  
<div class="category">
      <div class="box">
      <b class="rtop">
        <b class="r1"></b> <b class="r2"></b> <b class="r3"></b> <b class="r4"></b>
      </b>
      <div class="content">

      <a href="./langref.org - ruby, java, perl, groovy ... - Lists_files/langref.org - ruby, java, perl, groovy ... - Lists.htm">Lists</a>
        </div>
      <b class="rbottom">
        <b class="r4"></b> <b class="r3"></b> <b class="r2"></b> <b class="r1"></b>
      </b>
    </div>

</div>
<div id="category4">
  <div class="subcategory">
      <div class="box">
      <b class="rtop">
        <b class="r1"></b> <b class="r2"></b> <b class="r3"></b> <b class="r4"></b>
      </b>
      <div class="content">

    <a href="http://langref.org/all-languages/lists/declaration">Declaration</a>
        </div>
      <b class="rbottom">
        <b class="r4"></b> <b class="r3"></b> <b class="r2"></b> <b class="r1"></b>
      </b>
    </div>

</div>
<div style="clear:both">
  <div id="subcategory22">
    <div class="problem">
  <h3><a href="http://langref.org/all-languages/lists/declaration/define-an-empty-list">Define an empty list</a></h3>
  <div class="solutions" id="problem37">
    Assign the variable <code>"list"</code> to a list with no elements
    
      
        
        
          <div class="ruby"><div class="code"><span class="type">ruby</span><div class="body">list = []</div><div class="body-multiple">list = Array.new</div></div></div>
        
      
        
        
          <div class="java"><div class="code"><span class="type">java</span><div class="body">List list = Collections.emptyList();</div><div class="body-multiple">String[] list = {};</div></div></div>
        
      
        
        
          <div class="perl"><div class="code"><span class="type">perl</span><div class="body">@list = ();</div></div></div>
        
      
        
        
          <div class="groovy"><div class="code"><span class="type">groovy</span><div class="body">list = []</div><div class="body-multiple">// if a special kind of list is required<br>list = new LinkedList()   // java style<br>LinkedList list = []      // statically typed<br>// using 'as' operator<br>list = [] as java.util.concurrent.CopyOnWriteArrayList<br><br></div></div></div>
        
      
        
        
          <div class="scala"><div class="code"><span class="type">scala</span><div class="body">val list = Nil</div><div class="body-multiple">val list = List()  </div><div class="body-multiple">val list : List[String] = List() </div></div></div>
        
      
        
        
          <div class="python"><div class="code"><span class="type">python</span><div class="body">list = []<br></div></div></div>
        
      
        
        
          <div class="cpp"><div class="code"><span class="type">cpp</span><div class="body">Generic::List&lt;String^&gt;^ list = gcnew Generic::List&lt;String^&gt;();</div><div class="body-multiple">std::list&lt;std::string&gt; list;</div></div></div>
        
      
        
        
          <div class="fsharp"><div class="code"><span class="type">fsharp</span><div class="body">let list = []</div><div class="body-multiple">let list = List.empty</div><div class="body-multiple">let list = new Generic.List&lt;string&gt;()</div><div class="body-multiple">let list = new Generic.LinkedList&lt;string&gt;()</div></div></div>
        
      
        
        
          <div class="erlang"><div class="code"><span class="type">erlang</span><div class="body">List = [],</div></div></div>
        
      
        
        
          <div class="ocaml"><div class="code"><span class="type">ocaml</span><div class="body">let list = [];;</div></div></div>
        
      
        
        
          <div class="csharp"><div class="code"><span class="type">csharp</span><div class="body">var list = new List&lt;object&gt;();</div></div></div>
        
      
        
        
          <div class="php"><div class="code"><span class="type">php</span><div class="body">$list = array();</div></div></div>
        
      
        
        
          <div class="haskell"><div class="code"><span class="type">haskell</span><div class="body">let list = []</div></div></div>
        
      
        
        
          <div class="clojure"><div class="code"><span class="type">clojure</span><div class="body">(list)</div><div class="body-multiple">'()</div></div></div>
        
      
        
        
          <div class="fantom"><div class="code"><span class="type">fantom</span><div class="body">list := [,]    </div></div></div>
        
      
        
        
          <div class="go"><div class="code"><span class="type">go</span><div class="body">var l []string;</div></div></div>
        
      
    
  </div>
</div><div class="problem">
  <h3><a href="http://langref.org/all-languages/lists/declaration/define-a-static-list">Define a static list</a></h3>
  <div class="solutions" id="problem38">
    Define the list <code>[One,&nbsp;Two,&nbsp;Three,&nbsp;Four,&nbsp;Five]</code>
    
      
        
        
          <div class="ruby"><div class="code"><span class="type">ruby</span><div class="body">list = ['One', 'Two', 'Three', 'Four', 'Five']</div><div class="body-multiple">list = %w(One Two Three Four Five)</div></div></div>
        
      
        
        
          <div class="java"><div class="code"><span class="type">java</span><div class="body">List&lt;String&gt; numbers = new ArrayList&lt;String&gt;();<br>Collections.addAll(numbers, "One", "Two", "Three", "Four", "Five");</div><div class="body-multiple">List numbers = new ArrayList();<br>numbers.add("One");<br>numbers.add("Two");<br>numbers.add("Three");<br>numbers.add("Four");<br>numbers.add("Five");</div><div class="body-multiple">List numbers = Arrays.asList(new String[]{"One", "Two", "Three", "Four", "Five"});</div><div class="body-multiple">String[] numbers = {"One", "Two", "Three", "Four", "Five"};</div><div class="body-multiple">List numbers = new ArrayList(){{put("One");  put("Two"); put("Three"); put("Four"); put("Five"); }};</div></div></div>
        
      
        
        
          <div class="perl"><div class="code"><span class="type">perl</span><div class="body">@list = qw(One Two Three Four Five);</div><div class="body-multiple">@list = ('One', 'Two', 'Three', 'Four', 'Five');</div></div></div>
        
      
        
        
          <div class="groovy"><div class="code"><span class="type">groovy</span><div class="body">list = ['One', 'Two', 'Three', 'Four', 'Five']</div><div class="body-multiple">// other variations<br>List&lt;String&gt; numbers1 = ['One', 'Two', 'Three', 'Four', 'Five']<br>String[] numbers2 = ['One', 'Two', 'Three', 'Four', 'Five']<br>numbers3 = new LinkedList(['One', 'Two', 'Three', 'Four', 'Five'])<br>numbers4 = ['One', 'Two', 'Three', 'Four', 'Five'] as Stack // Groovy 1.6+<br></div></div></div>
        
      
        
        
          <div class="scala"><div class="code"><span class="type">scala</span><div class="body">val list = "One" :: "Two" :: "Three" :: "Four" :: "Five" :: Nil</div><div class="body-multiple">val list = List("One", "Two", "Three", "Four", "Five") </div><div class="body-multiple">val list: List[String] = List("One", "Two", "Three", "Four", "Five") </div></div></div>
        
      
        
        
          <div class="python"><div class="code"><span class="type">python</span><div class="body">list = ['One', 'Two', 'Three', 'Four', 'Five']<br>print list</div></div></div>
        
      
        
        
          <div class="cpp"><div class="code"><span class="type">cpp</span><div class="body">array&lt;String^&gt;^ input = {"One", "Two", "Three", "Four", "Five"};<br>Generic::List&lt;String^&gt;^ list = gcnew Generic::List&lt;String^&gt;((Generic::IEnumerable&lt;String^&gt;^) input);<br></div><div class="body-multiple">Generic::List&lt;String^&gt;^ list = gcnew Generic::List&lt;String^&gt;();<br><br>list-&gt;Add("One");<br>list-&gt;Add("Two");<br>list-&gt;Add("Three");<br>list-&gt;Add("Four");<br>list-&gt;Add("Five");</div><div class="body-multiple">std::string input[] = {"One", "Two", "Three", "Four", "Five"};<br>std::list&lt;std::string&gt; list(input, input + 5);</div><div class="body-multiple">std::list&lt;std::string&gt; list;<br><br>list.push_back("One");<br>list.push_back("Two");<br>list.push_back("Three");<br>list.push_back("Four");<br>list.push_back("Five");</div><div class="body-multiple">list&lt;string&gt; lst = { "One", "Two", "Three", "Four", "Five" };</div><div class="body-multiple">list&lt;string&gt; lst;<br>lst += "One", "Two", "Three", "Four", "Five";</div></div></div>
        
      
        
        
          <div class="fsharp"><div class="code"><span class="type">fsharp</span><div class="body">let list = ["One"; "Two"; "Three"; "Four"; "Five"]</div><div class="body-multiple">let list = (new Generic.LinkedList&lt;string&gt;([|"One"; "Two"; "Three"; "Four"; "Five"|]))</div><div class="body-multiple">let list = (new Generic.LinkedList&lt;string&gt;())<br><br>list.AddFirst("One") ; list.AddLast("Five") ; list.AddBefore(list.Find("Five"), "Four")<br>list.AddAfter(list.Find("One"), "Two") ; list.AddAfter(list.Find("Two"), "Three")</div><div class="body-multiple">let list = (new Generic.List&lt;string&gt;())<br><br>[|"One"; "Two"; "Three"; "Four"; "Five"|] |&gt; Array.iter (fun x -&gt; list.Add(x))</div></div></div>
        
      
        
        
          <div class="erlang"><div class="code"><span class="type">erlang</span><div class="body">List = [one, two, three, four, five],</div><div class="body-multiple">List = ['One', 'Two', 'Three', 'Four', 'Five'],</div></div></div>
        
      
        
        
          <div class="ocaml"><div class="code"><span class="type">ocaml</span><div class="body">let list = [ "One"; "Two"; "Three"; "Four"; "Five" ];;</div></div></div>
        
      
        
        
          <div class="csharp"><div class="code"><span class="type">csharp</span><div class="body">IList&lt;string&gt; list = new string[]{"One","Two","Three","Four","Five"};</div></div></div>
        
      
        
        
          <div class="php"><div class="code"><span class="type">php</span><div class="body">$list = array("One", "Two", "Three", "Four", "Five");</div><div class="body-multiple">$list = array();<br>$list[] = "One";<br>$list[] = "Two";<br>$list[] = "Three";<br>$list[] = "Four";<br>$list[] = "Five";</div><div class="body-multiple">&lt;?php<br>$list = new SplFixedArray(5);<br><br>$list[0] = "One";<br>$list[1] = "Two";<br>$list[2] = "Three";<br>$list[3] = "Four";<br>$list[4] = "Five";<br>?&gt;</div></div></div>
        
      
        
        
          <div class="haskell"><div class="code"><span class="type">haskell</span><div class="body">let a = ["One", "Two", "Three", "Four", "Five"]</div></div></div>
        
      
        
        
          <div class="clojure"><div class="code"><span class="type">clojure</span><div class="body">(def a '[One Two Three Four Five])</div><div class="body-multiple">(def a (list "One" "Two" "Three" "Four" "Five"))</div></div></div>
        
      
        
        
          <div class="fantom"><div class="code"><span class="type">fantom</span><div class="body">list := ["One", "Two", "Three", "Four", "Five"]     </div></div></div>
        
      
        
        
          <div class="go"><div class="code"><span class="type">go</span><div class="body">var l = []string{"One", "Two", "Three", "Four", "Five"}</div></div></div>
        
      
    
  </div>
</div>
  </div>
<div class="subcategory">
      <div class="box">
      <b class="rtop">
        <b class="r1"></b> <b class="r2"></b> <b class="r3"></b> <b class="r4"></b>
      </b>
      <div class="content">

    <a href="http://langref.org/all-languages/lists/output">Output</a>
        </div>
      <b class="rbottom">
        <b class="r4"></b> <b class="r3"></b> <b class="r2"></b> <b class="r1"></b>
      </b>
    </div>

</div>
<div style="clear:both">
  <div id="subcategory23">
    <div class="problem">
  <h3><a href="http://langref.org/all-languages/lists/output/join-the-elements-of-a-list-separated-by-commas">Join the elements of a list, separated by commas</a></h3>
  <div class="solutions" id="problem39">
    Given the list <code>[Apple,&nbsp;Banana,&nbsp;Carrot]</code> produce <code>"Apple,&nbsp;Banana,&nbsp;Carrot"</code>
    
      
        
        
          <div class="ruby"><div class="code"><span class="type">ruby</span><div class="body">string = fruit.join(', ')</div></div></div>
        
      
        
        
          <div class="java"><div class="code"><span class="type">java</span><div class="body">StringBuffer sb = new StringBuffer();<br>for (Iterator it = fruit.iterator(); it.hasNext();) {<br>    sb.append(it.next());<br>    if (it.hasNext()) {<br>    	sb.append(", ");<br>    }<br>}<br>String result = sb.toString();</div><div class="body-multiple">StringBuilder sb = new StringBuilder(fruit.get(0));<br>for (String item : fruit.subList(1, fruit.size())) sb.append(", ").append(item);<br>String result = sb.toString();</div><div class="body-multiple">String result = StringUtils.join(fruit, ", ");</div></div></div>
        
      
        
        
          <div class="perl"><div class="code"><span class="type">perl</span><div class="body">print join ', ', qw(Apple Banana Carrot);</div><div class="body-multiple"># Longer and less efficient than join(), but illustrates<br># Perl's foreach operator, which can be useful for <br># less trivial problems with lists<br><br>@list = ('Apple', 'Banana', 'Carrot');<br>foreach $fruit (@list) {<br>	print "$fruit,";<br>}<br>print "\n";</div><div class="body-multiple">my @a = qw/Apple Banana Carrot/;<br>{ <br>  local $, = ", ";<br>  print @a  <br>}<br>print "\n";</div><div class="body-multiple">my @a = qw/Apple Banana Carrot/;<br>{<br>  local $" = ", ";<br>  print "@a\n";<br>}<br></div></div></div>
        
      
        
        
          <div class="groovy"><div class="code"><span class="type">groovy</span><div class="body">string = fruit.join(', ')</div><div class="body-multiple">string = fruit.toString()[1..-2]</div></div></div>
        
      
        
        
          <div class="scala"><div class="code"><span class="type">scala</span><div class="body">val result =<br>((fruit.tail foldLeft (new StringBuilder(fruit.head))) {(acc, e) =&gt; acc.append(", ").append(e)}).toString</div><div class="body-multiple">val result = fruit.mkString(",")</div><div class="body-multiple">val fruit = List[String]("Apple", "Banana", "Carrot")<br>println(fruit.mkString(", "))</div></div></div>
        
      
        
        
          <div class="python"><div class="code"><span class="type">python</span><div class="body">print ", ".join(['Apple', 'Banana', 'Carrot'])</div></div></div>
        
      
        
        
          <div class="cpp"><div class="code"><span class="type">cpp</span><div class="body">String^ result = String::Join(L", ", fruit-&gt;ToArray());</div><div class="body-multiple">string fruits[] = {"Apple", "Banana", "Carrot"};<br>string result = boost::algorithm::join(fruits, ", ");</div></div></div>
        
      
        
        
          <div class="fsharp"><div class="code"><span class="type">fsharp</span><div class="body">let result = String.Join(", ", [|"Apple"; "Banana"; "Carrot"|])  </div><div class="body-multiple">let result = (List.fold_left (fun acc item -&gt; acc ^ (", " ^ item)) (List.hd fruit) (List.tl fruit))</div><div class="body-multiple">let result = (List.fold_left (fun (acc : StringBuilder) (item : string) -&gt; acc.Append(", ").Append(item)) (new StringBuilder(List.hd fruit)) (List.tl fruit)).ToString()</div></div></div>
        
      
        
        
          <div class="erlang"><div class="code"><span class="type">erlang</span><div class="body">Result = string:join(Fruit, ", "),</div><div class="body-multiple">Result = lists:foldl(fun (E, Acc) -&gt; Acc ++ ", " ++ E end, hd(Fruit), tl(Fruit)),</div><div class="body-multiple">Result = lists:flatten([ hd(Fruit) | [ ", " ++ X || X &lt;- tl(Fruit)]]).</div></div></div>
        
      
        
        
          <div class="ocaml"><div class="code"><span class="type">ocaml</span><div class="body">let () =<br>  let lst = ["Apple"; "Banana"; "Carrot"] in<br>  let str = String.concat ", " lst in<br>  print_endline str</div></div></div>
        
      
        
        
          <div class="csharp"><div class="code"><span class="type">csharp</span><div class="body">using System.Collections.Generic;<br>public class JoinEach {<br>    public static void Main() {<br>        var list = new List&lt;string&gt;() {"Apple", "Banana", "Carrot"};<br>        System.Console.WriteLine( string.Join(", ", list.ToArray()) );<br>    }<br>}<br></div></div></div>
        
      
        
        
          <div class="php"><div class="code"><span class="type">php</span><div class="body">$string = implode(", ", $fruits);</div></div></div>
        
      
        
        
          <div class="haskell"><div class="code"><span class="type">haskell</span><div class="body">import Data.List<br><br>let join = intercalate ", " ["Apple", "Banana", "Carrot"]</div></div></div>
        
      
        
        
          <div class="clojure"><div class="code"><span class="type">clojure</span><div class="body">(apply str (interpose ", " '("Apple" "Banana" "Carrot")))</div></div></div>
        
      
        
        
          <div class="fantom"><div class="code"><span class="type">fantom</span><div class="body">["Apple", "Banana", "Carrot"].join(", ")     </div></div></div>
        
      
        
        
          <div class="go"><div class="code"><span class="type">go</span><div class="body">s := strings.Join([]string {"Apple", "Banana", "Carrot"}, ", ")</div></div></div>
        
      
    
  </div>
</div><div class="problem">
  <h3><a href="http://langref.org/all-languages/lists/output/english-join">Join the elements of a list, in correct english</a></h3>
  <div class="solutions" id="problem40">
    Create a function join that takes a List and produces a string containing an english language concatenation of the list.  It should work with the following examples: 
<br>join(<code>[Apple,&nbsp;Banana,&nbsp;Carrot]</code>) = <code>"Apple,&nbsp;Banana,&nbsp;and&nbsp;Carrot"</code>
<br>join(<code>[One,&nbsp;Two]</code>) = <code>"One&nbsp;and&nbsp;Two"</code>
<br>join(<code>[Lonely]</code>) = <code>"Lonely"</code>
<br>join(<code>[]</code>) = <code>""</code>
    
      
        
        
          <div class="ruby"><div class="code"><span class="type">ruby</span><div class="body">def join(arr)<br>    return '' if not arr<br>    case arr.size<br>        when 0 then ''<br>        when 1 then arr[0]<br>        when 2 then arr.join(' and ')<br>        else arr[0..-2].join(', ') + ', and ' + arr[-1]<br>    end<br>end</div></div></div>
        
      
        
        
          <div class="java"><div class="code"><span class="type">java</span><div class="body">private String join(List elements) {<br>    if (elements == null || elements.size() == 0) {<br>        return "";<br>    } else if (elements.size() == 1) {<br>        return elements.get(0).toString();<br>    } else if (elements.size() == 2) {<br>        return elements.get(0) + " and " + elements.get(1);<br>    }<br>    StringBuffer sb = new StringBuffer();<br>    for (Iterator it = elements.iterator(); it.hasNext();) {<br>        String next = (String) it.next();<br>        if (sb.length() &gt; 0) {<br>            if (it.hasNext()) {<br>                sb.append(", ");<br>            } else {<br>                sb.append(", and ");<br>            }<br>        }<br>        sb.append(next);<br>    }<br>    return sb.toString();<br>}</div><div class="body-multiple">System.out.println(join(fruit));</div></div></div>
        
      
        
        
          <div class="perl"><div class="code"><span class="type">perl</span><div class="body">sub myjoin {<br>  $_ = join ', ', @_;<br>  s/, ([^,]+)$/ and $1/;<br>  return $_;<br>}<br><br><br># Note: I don't think this meets the spec --Geoff</div><div class="body-multiple">sub myjoin {<br>  if ($#_ &lt; 2) {<br>    return join ' and ', @_;<br>  } else {<br>    return join(', ', @_[0..$#_-1]) . ' and ' . $_[-1];<br>  }<br>}<br><br># Note: I don't think this meets the spec --Geoff</div><div class="body-multiple"># Previous "myjoin()" responses don't meet the spec of including <br># the final comma before the "and" if the list has more than <br># two elements...this is one way to meet that spec...it may<br># not be the most efficient...<br><br>sub AnotherMyJoin {<br>     my @list = @_;<br><br>     if ($#list == -1) {return}<br>     elsif ($#list == 0) {return $list[0]}<br>     elsif ($#list == 1) {return $list[0].' and '.$list[1]}<br>     else {<br>          return join(", ", @list[0..$#list - 1]) . ', and '. $list[$#list];<br>     }<br>}</div><div class="body-multiple"># This is the long way, but it's kind of fun<br># It illustrates the use of Perl's reverse()<br># operator to work our way through the list<br># elements backwards...I wrote this one before<br># getting smart and looking at some of the other<br># algorithms from the other languages.  Still,<br># it is only 12 lines of code vs 9 for my other<br># solution if you disregard the comments.<br><br>sub myjoin {<br>     my @list = reverse(@_);  # Reverse original order of elements<br>     my $retval;<br>     <br>     # Make our exit here if we were passed an empty list<br>     if ($#list == -1) {return}<br><br>     # Loop through reversed elements in end-to-start order<br>     for (0..$#list) {<br>          # Add the reversed form of each element plus a space char<br>          $retval .= reverse($list[$_]).' ';<br>          <br>          # Add 'and' to lists with two or more elements <br>          # placing it in between final and 'next to final'<br>          $retval .= "dna " if ($#list &gt; 0 and $_== 0);<br>          <br>          # Add ',' to each element as long as there are more<br>          # than two elements and the current element isn't the<br>          # final element<br>          $retval .= "," if ($#list &gt; 1 and $_ != $#list);<br>     }<br><br>     # Remove what will end up as an extraneous leading space<br>     chop($retval);<br><br>     # Done looping, now reverse things back into correct order and return<br>     $retval = reverse($retval); <br>     return($retval);<br>}</div><div class="body-multiple"># Yes, this doesn't meet the spec, the spec is flawed<br># the serial comma (Oxford comma) is not required in a list<br>sub english_join {<br>    return join(', ', @_[0..$#_-1])<br>            . ($#_ ? ' and ' : '' )<br>            . $_[-1];<br>}<br></div></div></div>
        
      
        
        
          <div class="groovy"><div class="code"><span class="type">groovy</span><div class="body">def join(list) {<br>  if (!list) return ''<br>  switch(list.size()) {<br>    case 1:<br>      return list[0]<br>    case 2:<br>      return list.join(' and ')<br>    default:<br>      return list[0..-2].join(', ') + ', and ' + list[-1]<br>  }<br>}</div><div class="body-multiple">ArrayList.metaClass.joinEng = { -&gt;<br>    def closureMap = [0: { -&gt; delegate.join(' and ')}, 1 : {-&gt; delegate.join(' and ')}].withDefault { k -&gt;  { -&gt; delegate[0..-2].join(', ') + ', and ' + delegate[-1] } }<br>    if (delegate.size()) closureMap[delegate.size()-1].call()<br>    else ""<br>}<br><br>assert ["a"].joinEng() == "a"<br>assert ["a", "b"].joinEng() == "a and b"<br>assert ["a", "b", "c"].joinEng() == "a, b, and c"<br>assert [].joinEng() == ""<br></div><div class="body-multiple">def join(list) {<br>   list.join(', ').reverse().replaceFirst(/,/, "dna ").reverse()<br>}</div></div></div>
        
      
        
        
          <div class="scala"><div class="code"><span class="type">scala</span><div class="body">def join(list : List[String]) : String = list match {<br>  case List() =&gt; ""<br>  case List(x) =&gt; x<br>  case List(x,y) =&gt; x + " and " + y<br>  case List(x,y,z) =&gt; x + ", " + y + ", and " + z<br>  case _ =&gt; list(0) + ", " + join(list.tail)<br>}</div><div class="body-multiple">def join(list : List[String]) : String = list match {<br>  case List()      =&gt; ""<br>  case List(x)     =&gt; x<br>  case List(x,y)   =&gt; x + " and " + y<br>  case List(x,y,z) =&gt; x + ", " + y + ", and " + z<br>  case x::xs       =&gt; x + ", " + join(xs)<br>}</div><div class="body-multiple">def join[T](list : List[T]) = list match {<br>  case xs if xs.size &lt; 3 =&gt; xs.mkString(" and ")<br>  case xs                =&gt; xs.init.mkString(", ") + ", and " + xs.last<br>}</div></div></div>
        
      
        
        
          <div class="python"><div class="code"><span class="type">python</span><div class="body">def join(*x):<br>    if len(x) &lt;= 2:<br>        return ' and '.join(x)<br>    else:<br>        return ', '.join(x[:-1] + ('and ' + x[-1],))<br><br>if __name__ == "__main__":<br>    assert join("Apple", "Banana", "Carrot") == "Apple, Banana, and Carrot"<br>    assert join("One", "Two") == "One and Two"<br>    assert join("Lonely") == "Lonely"<br>    assert join(*[]) == ""<br></div></div></div>
        
      
        
        
          <div class="cpp"><div class="code"><span class="type">cpp</span><div class="body">Console::WriteLine(join(fruit));    </div><div class="body-multiple">string join(const vector&lt;string&gt; &amp;s, int b=0)<br>{<br>    switch (s.size() - b)<br>    {<br>    case 0: return "";<br>    case 1: return s[b];<br>    case 2: return s[b] + (s.size() &gt; 2 ? "," : "") + " and " + s[b+1];<br>    default: return s[b] + ", " + join(s, b+1);<br>    }<br>}</div></div></div>
        
      
        
        
          <div class="fsharp"><div class="code"><span class="type">fsharp</span><div class="body">let join list =<br>    let rec join' list' s =<br>        match list' with<br>        | []      -&gt; s <br>        | [w]     -&gt; join' [] (s ^ " and " ^ w)<br>        | w :: ws -&gt; join' ws (s ^ ", " ^ w)<br>    match list with<br>    | []      -&gt; "" <br>    | w :: ws -&gt; join' ws w<br><br>// ------<br><br>printfn "%s" (join fruit) </div></div></div>
        
      
        
        
          <div class="erlang"><div class="code"><span class="type">erlang</span><div class="body">io:format("~s~n", [join(Fruit)]).<br><br>% ------<br><br>join([])       -&gt; "";<br>join([W|Ws])   -&gt; join(Ws, W).<br><br>join([], S)     -&gt; S;<br>join([W], S)    -&gt; join([], S ++ " and " ++ W);<br>join([W|Ws], S) -&gt; join(Ws, S ++ ", " ++ W).</div><div class="body-multiple">%% According to the reference manual, "string is not a data type in Erlang."<br>%% Instead it has lists of integers.  But I/O functions in general accept<br>%% IO lists, where an IO list is either a list of IO lists or an integer.<br>%% This gives you O(1) string concatenation.<br><br>-module(commalist).<br>-export([join/1]).<br><br>join([])           -&gt; "";<br>join([W])          -&gt; W;<br>join([W1, W2])     -&gt; [W1, " and ", W2];<br>join([W1, W2, W3]) -&gt; [W1, ", ", W2, ", and ", W3];<br>join([W1|Ws])      -&gt; [W1, ", ", join(Ws)].<br><br></div></div></div>
        
      
        
        
          <div class="ocaml"><div class="code"><span class="type">ocaml</span><div class="body">let join list =<br>   let rec join' list acc =<br>      match list with<br>      | []            -&gt; ""<br>      | [single]      -&gt; single<br>      | one::[two]    -&gt; <br>	         if acc = "" then one ^ " and " ^ two<br>        	 else acc ^ one ^ ", and " ^ two<br>      | first::others -&gt; join' others (acc ^ first ^ ", ")<br>   in<br>   join' list ""</div></div></div>
        
      
        
        
          <div class="csharp"><div class="code"><span class="type">csharp</span><div class="body">using System.Collections.Generic;<br>using System.Linq;<br><br>public class CSharpListToEnglishList {<br>    public string JoinAsEnglishList (List&lt;string&gt; words) {<br>        switch (words.Count) {<br>            case 0: return "";<br>            case 1: return words[0];<br>            case 2: return string.Format("{0} and {1}", words.ToArray());<br>            default:<br>                return JoinAsEnglishList( new List&lt;string&gt;() {<br>                        string.Join(", ", words.Take(words.Count - 1).ToArray()) + ",",<br>                        words.Last()<br>                });<br>        }<br>    }<br>    // Driver...<br>    public static void Main() {<br>        var joiner = new CSharpListToEnglishList();<br>        System.Console.WriteLine( <br>            joiner.JoinAsEnglishList(new List&lt;string&gt;() { "Apple", "Banana", "Carrot", "Orange" }) );<br>        System.Console.WriteLine( <br>            joiner.JoinAsEnglishList(new List&lt;string&gt;() { "Apple", "Banana", "Carrot" }) );<br>        System.Console.WriteLine( <br>            joiner.JoinAsEnglishList(new List&lt;string&gt;() { "One", "Two" }) );<br>        System.Console.WriteLine( <br>            joiner.JoinAsEnglishList(new List&lt;string&gt;() { "Lonely" }) );<br>        System.Console.WriteLine( <br>            joiner.JoinAsEnglishList(new List&lt;string&gt;()) );<br>    }<br>}<br></div></div></div>
        
      
        
        
          <div class="php"><div class="code"><span class="type">php</span><div class="body">function ImplodeToEnglish($array) {<br>    // sanity check<br>    if (!$array || !count ($array))<br>        return "";<br><br>    // get last element   <br>    $last = array_pop($array);<br><br>    // if it was the only element - return it<br>    if (!count ($array))<br>        return $last;   <br><br>    return implode(", ", $array)." and ".$last;<br>}<br>//example<br>ImplodeToEnglish(array("Apple", "Banana")); // returns: Apple and Banana</div></div></div>
        
      
        
        
          <div class="haskell"><div class="code"><span class="type">haskell</span><div class="body">join [] = ""<br>join [x] = x<br>join [x,y] = x ++ " and " ++ y<br>join [x,y,z] = x ++ ", " ++ y ++ ", and " ++ z<br>join (x:xs) = x ++ ", " ++ join xs<br></div></div></div>
        
      
        
        
          <div class="clojure"><div class="code"><span class="type">clojure</span><div class="body">(defn join [lst] <br>  (cond <br>    (= (count lst) 0) ""<br>    (= (count lst) 1) (first lst)<br>    (= (count lst) 2) (str (first lst) " and " (second lst)) <br>    (&gt; (count lst) 2) (loop [lst lst sb (StringBuilder.)] <br>                        (if (empty? lst) <br>                          (.toString sb) <br>                          (recur (rest lst) (.append sb (cond <br>                                                          (&gt; (count lst) 2) (str (first lst) ", ") <br>                                                          (&gt; (count lst) 1) (str (first lst) ", and ")<br>                                                          (= (count lst) 1) (str (first lst)))))))))</div><div class="body-multiple">(defn join<br>  ([lst]<br>      (join lst false))<br>  ([lst is-long]<br>     (condp = (count lst)<br>       0 ""<br>       1 (first lst)<br>       2 (str (first lst) (if is-long ",") " and " (second lst))<br>       (str (first lst) ", " (join (rest lst) true)))))<br></div></div></div>
        
      
        
        
          <div class="fantom"><div class="code"><span class="type">fantom</span><div class="body">join := |List list -&gt; Str| <br> { <br>   switch(list.size) <br>   { <br>     case 0: return ""<br>     case 1: return list[0]<br>     case 2: return list.join(" and ")<br>     default: return list[0..-2].join(", ") + ", and " + list[-1]<br>   }<br> }<br><br> echo(join(["Apple", "Banana", "Carrot"]))<br> echo(join(["One", "Two"]))<br> echo(join(["Lonely"]))<br> echo(join([,]))      </div></div></div>
        
      
        
        
      
    
  </div>
</div><div class="problem">
  <h3><a href="http://langref.org/all-languages/lists/output/list-combinations">Produce the combinations from two lists</a></h3>
  <div class="solutions" id="problem63">
    Given two lists, produce the list of tuples formed by taking the combinations from the individual lists. E.g. given the letters <code>["a",&nbsp;"b",&nbsp;"c"]</code> and the numbers <code>[4,&nbsp;5]</code>, produce the list: <code>[["a",&nbsp;4]</code>, <code>["b",&nbsp;4]</code>, <code>["c",&nbsp;4]</code>, <code>["a",&nbsp;5]</code>, <code>["b",&nbsp;5]</code>, <code>["c",&nbsp;5]</code>]
    
      
        
        
          <div class="ruby"><div class="code"><span class="type">ruby</span><div class="body">common = [] ; [4, 5].each {|n| ['a', 'b', 'c'].each {|l| common &lt;&lt; [l, n]}}</div></div></div>
        
      
        
        
          <div class="java"><div class="code"><span class="type">java</span><div class="body">List&lt;String&gt; combinations = new ArrayList&lt;String&gt;();<br><br>for (int number : numbers)<br>   for (String letter : letters)<br>      combinations.add(letter + ":" + Integer.toString(number));</div><div class="body-multiple">SortedSet&lt;AbstractMap.SimpleImmutableEntry&lt;String, Integer&gt; &gt; combinations =<br>   new TreeSet&lt;AbstractMap.SimpleImmutableEntry&lt;String, Integer&gt; &gt;(new CombinationComparator());<br><br>for (int number : numbers)<br>   for (String letter : letters)<br>      combinations.add(new AbstractMap.SimpleImmutableEntry&lt;String, Integer&gt;(letter, Integer.valueOf(number)));</div></div></div>
        
      
        
        
          <div class="perl"><div class="code"><span class="type">perl</span><div class="body">@letters = qw(a b c);<br>@numbers = (4, 5);<br>@list = map { $number=$_; map [$_, $number], @letters; } @numbers;<br></div><div class="body-multiple">@letters = qw(a b c);<br>@numbers = (4, 5);<br><br>for $number (@numbers) {<br>  for $letter (@letters) {<br>    push @list, [$letter, $number];<br>  }<br>}<br></div></div></div>
        
      
        
        
          <div class="groovy"><div class="code"><span class="type">groovy</span><div class="body">letters = ['a', 'b', 'c']<br>numbers = [4, 5]<br>combos = [letters, numbers].combinations()</div></div></div>
        
      
        
        
          <div class="scala"><div class="code"><span class="type">scala</span><div class="body">val combinations = <br>(numbers foldLeft List[Pair[String, Int]]()) { (acc : List[Pair[String, Int]], number : Int) =&gt;<br>acc ::: (letters map { (letter : String) =&gt; Pair(letter : String, number : Int) }) }</div><div class="body-multiple">def product(set1 : List[_], set2 : List[_]) : List[Pair[_, _]] =<br>{<br>val p = new mutable.ArrayBuffer[Pair[_, _]]()<br>for (e1 &lt;- set1) for (e2 &lt;- set2) p += Pair(e1, e2)<br>p.toList<br>}<br><br>// ------<br><br>val combinations =<br>product(numbers, letters) map { (c) =&gt; c match { case Pair(number, letter) =&gt; Pair(letter, number) } }</div><div class="body-multiple">val letters = List('a', 'b', 'c')<br>val numbers = List(4, 5)<br>for { l &lt;- letters; n &lt;- numbers } yield (l,n)</div></div></div>
        
      
        
        
          <div class="python"><div class="code"><span class="type">python</span><div class="body">[(x, y) for y in [1,2] for x in ['a','b','c']]</div><div class="body-multiple">import itertools<br>[x for x in itertools.product(["a", "b", "c"], [4, 5])]</div></div></div>
        
      
        
        
          <div class="cpp"><div class="code"><span class="type">cpp</span><div class="body">Specialized::StringCollection^ combinations = gcnew Specialized::StringCollection;<br><br>for each(int number in numbers)<br>   for each(String^ letter in letters)<br>      combinations-&gt;Add(makeCombo(letter, number));</div><div class="body-multiple">string letters[] = { "a", "b", "c" };<br>int numbers[] = { 4, 5 };<br>list&lt;pair&lt;string,int&gt; &gt; combo;<br><br>for (int n = 0; n &lt; sizeof numbers / sizeof *numbers; n++)<br>	for (int l = 0; l &lt; sizeof letters / sizeof *letters; l++)<br>        combo.push_back(make_pair(letters[l], numbers[n]));<br><br>cout &lt;&lt; combo &lt;&lt; endl;</div></div></div>
        
      
        
        
          <div class="fsharp"><div class="code"><span class="type">fsharp</span><div class="body">let combinations = (List.fold_left (fun acc number -&gt; acc @ (List.map (fun letter -&gt; (letter, number)) letters)) [] numbers)</div><div class="body-multiple">let combinations aa bb = <br>    aa<br>    |&gt; List.map (fun a -&gt; bb |&gt; List.map (fun b -&gt; (a, b)))<br>    |&gt; List.concat</div></div></div>
        
      
        
        
          <div class="erlang"><div class="code"><span class="type">erlang</span><div class="body">Combinations =<br>lists:foldl(fun (Number, Acc) -&gt; Acc ++ lists:map(fun (Letter) -&gt; {Letter, Number} end, Letters) end, [], Numbers),</div><div class="body-multiple">Combinations = lists:keysort(2, sofs:to_external(sofs:product(sofs:set(Letters), sofs:set(Numbers))))</div><div class="body-multiple"> [[A, B] || A &lt;- ["a", "b", "c"], B &lt;- [4, 5]].<br><br></div></div></div>
        
      
        
        
          <div class="ocaml"><div class="code"><span class="type">ocaml</span><div class="body">let combinations =<br>  let l1 = ["a"; "b"; "c"]<br>  and l2 = [4; 5] in<br>  List.rev (<br>    List.fold_left (fun acc y -&gt;<br>      List.fold_left (fun acc2 x -&gt;<br>        (x, y)::acc2<br>      ) acc l1<br>    ) [] l2<br>  )</div></div></div>
        
      
        
        
          <div class="csharp"><div class="code"><span class="type">csharp</span><div class="body">using System.Collections.Generic;<br>public class ListCombiner {<br>    public static void Main() {<br>        var letters = new List&lt;char&gt;() { 'a', 'b', 'c' };<br>        var numbers = new List&lt;int&gt;() { 1, 2, 3 };<br><br>        // result is a list that contaings lists of objects<br>        var result = new List&lt;List&lt;object&gt;&gt;(); <br>        foreach (var l in letters) {<br>            foreach (var n in numbers) {<br>                result.Add(new List&lt;object&gt;() { l, n });<br>            }<br>        }<br>    }<br>}<br></div></div></div>
        
      
        
        
          <div class="php"><div class="code"><span class="type">php</span><div class="body">foreach ($short as $s) {<br>	foreach ($long as $l) {<br>		$list[] = array($l, $s);<br>	}<br>}</div></div></div>
        
      
        
        
          <div class="haskell"><div class="code"><span class="type">haskell</span><div class="body">comb :: [(String, Int)]<br>comb = do<br>   b &lt;- [4,5] <br>   a &lt;- ["a","b","c"]<br>   return (a,b)<br><br>main = mapM_ print comb</div><div class="body-multiple">comb :: [(String, Int)]<br>comb = [(a, b) |  b &lt;- [4,5], a &lt;- ["a","b","c"]]<br><br>main = print comb</div></div></div>
        
      
        
        
          <div class="clojure"><div class="code"><span class="type">clojure</span><div class="body">(defn combine [lst1 lst2]<br>  (mapcat (fn [x] (map #(list % x) lst1)) lst2))</div><div class="body-multiple">(mapcat (fn [x] (map #(list % x) ["a", "b", "c"])) [4, 5])</div><div class="body-multiple">(for [x [4 5] y ["a" "b" "c"]] [y x])</div></div></div>
        
      
        
        
          <div class="fantom"><div class="code"><span class="type">fantom</span><div class="body">[4,5].each |Int i| { ["a","b","c"].each |Str s| { r.add([i,s]) } }     </div></div></div>
        
      
        
        
      
    
  </div>
</div><div class="problem">
  <h3><a href="http://langref.org/all-languages/lists/output/from-a-list-produce-a-list-of-duplicate-entries">From a List Produce a List of Duplicate Entries</a></h3>
  <div class="solutions" id="problem97">
    Taking a list:
<br><code>["andrew",&nbsp;"bob",&nbsp;"chris",&nbsp;"bob"]</code>
<br>
<br>Write the code to produce a list of duplicates in the list:
<br><code>["bob"]</code>
    
      
        
        
          <div class="ruby"><div class="code"><span class="type">ruby</span><div class="body">foo = ['andrew', 'bob', 'chris', 'bob']<br>foo.inject({}) {|h,v| h[v]=h[v].to_i+1; h}.reject{|k,v| v==1}.keys</div></div></div>
        
      
        
        
          <div class="java"><div class="code"><span class="type">java</span><div class="body">List listOfDuplicates = new ArrayList(Arrays.asList(new String[]{"andrew", "bob", "chris", "bob"}));<br><br>Set set = new HashSet(listOfDuplicates);<br>for (Object element : set)<br>    listOfDuplicates.remove(element);</div></div></div>
        
      
        
        
          <div class="perl"><div class="code"><span class="type">perl</span><div class="body">my @input = ("andrew", "bob", "chris", "bob", "bob");<br><br>my %input_count;<br>my @output = grep { $input_count{$_}++; $input_count{$_} == 2 } @input;</div></div></div>
        
      
        
        
          <div class="groovy"><div class="code"><span class="type">groovy</span><div class="body">def input = ["andrew", "bob", "chris", "bob"] <br><br>def output = input.findAll{input.count(it)&gt;1}.unique()<br><br>assert output == ["bob"]</div></div></div>
        
      
        
        
          <div class="scala"><div class="code"><span class="type">scala</span><div class="body">List("andrew", "bob", "chris", "bob")<br>  .groupBy(identity)<br>  .filter( person =&gt; person._2.size &gt; 1)<br>  .map(_._1)</div><div class="body-multiple">val l = List("andrew", "bob", "chris", "bob")<br>l.diff(l.distinct)</div></div></div>
        
      
        
        
          <div class="python"><div class="code"><span class="type">python</span><div class="body">import itertools<br>input = ["andrew", "bob", "chris", "bob"] <br>input.sort()<br>output = [k for k, g in itertools.groupby(input, lambda x: x) if len(list(g)) &gt; 1]<br></div></div></div>
        
      
        
        
          <div class="cpp"><div class="code"><span class="type">cpp</span><div class="body">vector&lt;string&gt; lst = { "andrew", "bob", "chris", "bob" };<br>vector&lt;string&gt; lst_no_dups;<br>vector&lt;string&gt; tmp;<br>vector&lt;string&gt; dups;<br><br>sort(lst.begin(), lst.end());<br>unique_copy(lst.begin(), lst.end(), back_inserter(lst_no_dups));<br>set_difference(lst.begin(), lst.end(),<br>               lst_no_dups.begin(), lst_no_dups.end(),<br>               back_inserter(tmp));<br>unique_copy(tmp.begin(), tmp.end(), back_inserter(dups));<br><br>cout &lt;&lt; dups &lt;&lt; endl;</div><div class="body-multiple">list&lt;string&gt; lst = { "andrew", "bob", "chris", "bob" };<br>map&lt;string,int&gt; num_identical;<br>list&lt;string&gt; dups;<br><br>for (auto &amp;s: lst)<br>    num_identical[s]++;<br>for (auto &amp;n: num_identical)<br>    if (n.second &gt; 1)<br>        dups.push_back(n.first);<br>cout &lt;&lt; dups &lt;&lt; endl;<br></div></div></div>
        
      
        
        
          <div class="fsharp"><div class="code"><span class="type">fsharp</span><div class="body">["andrew"; "bob"; "chris"; "bob"]<br>  |&gt; Seq.countBy id<br>  |&gt; Seq.filter (fun (k,n) -&gt; n &gt; 1)<br>  |&gt; Seq.map fst<br>  |&gt; Seq.toList</div></div></div>
        
      
        
        
          <div class="erlang"><div class="code"><span class="type">erlang</span><div class="body">{_, Result} = lists:foldl(<br>    fun(X, {Uniq, Dupl}) -&gt; case lists:member(X, Uniq) of<br>        true -&gt; {Uniq,[X | Dupl]};<br>        _ -&gt; {[X | Uniq], Dupl}<br>        end<br>    end,<br>    {[], []},<br>    List),</div><div class="body-multiple">Fun = fun<br>    ([X | Xs], F) -&gt; case lists:member(X, Xs) of<br>        true -&gt; [X | F(Xs, F)];<br>        _ -&gt; F(Xs, F)<br>        end;<br>    ([], _) -&gt; []<br>end,<br>Result = Fun(List, Fun).</div></div></div>
        
      
        
        
          <div class="ocaml"><div class="code"><span class="type">ocaml</span><div class="body">let rem v lst =<br>  let rec aux acc = function<br>  | [] -&gt; List.rev acc<br>  | x::xs -&gt;<br>      if compare v x = 0<br>      then aux acc xs<br>      else aux (x::acc) xs<br>  in<br>  aux [] lst<br><br>(** in case of a match, returns a list with the duplicate(s) removed *)<br>let rec mem_rem v lst =<br>  let rec aux acc = function<br>  | [] -&gt; None<br>  | x::xs -&gt;<br>      if compare v x = 0<br>      then Some(List.rev_append acc (rem v xs))<br>      else aux (x::acc) xs<br>  in<br>  aux [] lst<br><br>let duplicates lst =<br>  let rec aux acc = function<br>    | [] -&gt; List.rev acc<br>    | x::xs -&gt;<br>        match mem_rem x xs with<br>        | Some ret -&gt; aux (x::acc) ret<br>        | None -&gt; aux acc xs<br>  in<br>  aux [] lst<br><br>let () =<br>  let lst = ["andrew"; "bob"; "chris"; "bob"; "mike"; "peter"; "bob"] in<br>  let dup = duplicates lst in<br>  List.iter print_endline dup</div><div class="body-multiple">(* Using standard (functorized) sets *)<br><br>module SetTools(ASet: Set.S) =<br>struct<br>  let find_duplicates l =<br>    let rec aux l seen acc =<br>      match l with<br>      | [] -&gt; acc<br>      | h :: q -&gt;<br>	if ASet.mem h seen then<br>	  aux q seen (h :: acc)<br>	else<br>	  aux q (ASet.add h seen) acc in<br>    aux l (ASet.empty) []<br>end<br><br>module StringSet = Set.Make(String)<br><br>module StringSetTools = SetTools(StringSet)<br><br>StringSetTools.find_duplicates ["andrew"; "bob"; "chris"; "bob"];;<br></div></div></div>
        
      
        
        
          <div class="csharp"><div class="code"><span class="type">csharp</span><div class="body">List&lt;String&gt; values = new List&lt;string&gt; {"andrew", "bob", "chris", "bob"};<br><br>var duplicates = values<br>    .GroupBy(i =&gt; i)<br>    .Where(j =&gt; j.Count() &gt; 1)<br>    .Select(s =&gt; s.Key);<br>foreach (var duplicate in duplicates)<br>{<br>    Console.WriteLine(duplicate);<br>}</div></div></div>
        
      
        
        
          <div class="php"><div class="code"><span class="type">php</span><div class="body">$arr = array('andrew', 'bob', 'chris', 'bob', 'chris', 'john', 'mary', 'lucy');<br><br>function match($a, $b)<br>{<br>    // This is a separate function so you could include checking<br>    // with loose comparisons or lowercase both strings, etc.<br>    return $a === $b;<br>}<br><br>$results = array();<br><br>sort($arr);<br><br>for($i = 0; $i &lt; count($arr) - 1; $i++)<br>{<br>    if (match($arr[$i], $arr[$i+1]))<br>    {<br>        $results[] = $arr[$i];<br>        $i++;<br>    }<br>}<br>print_r($results);</div><div class="body-multiple">$arr = array('lucy', 'andrew', 'lucy', 'bob', 'chris', 'bob', 'chris', 'john', 'mary');<br><br>function match($a, $b)<br>{<br>    // This is a separate function so you could include checking<br>    // with loose comparisons or lowercase both strings, etc.<br>    return $a === $b;<br>}<br><br>$results = array();<br><br>for($i = 0; $i &lt; count($arr); $i++)<br>{<br>    if (isset($results[$arr[$i]]))<br>    {<br>        $results[$arr[$i]]++;<br>    }<br>    else<br>    {<br>        $results[$arr[$i]] = 0;<br>    }<br>}<br><br>$out = array();<br><br>foreach($results as $name =&gt; $count)<br>{<br>    echo $name . ':' . $count . '&lt;br /&gt;';<br>    if ($count &gt; 0)<br>    {<br>        $out[] = $name;<br>    }<br>}<br><br>print_r($out);</div><div class="body-multiple">&lt;?php<br>$array = array("andrew", "bob", "chris", "bob");<br>$counts = array_count_values($array);<br><br>$duplicates = array_filter(<br>    array_unique($array),<br>    function($key) use ($counts) {<br>        return $counts[$key] &gt; 1;<br>    }<br>);<br>?&gt; <br></div></div></div>
        
      
        
        
          <div class="haskell"><div class="code"><span class="type">haskell</span><div class="body">import Data.List<br><br>input = ["andrew", "bob", "chris", "bob"]<br>output = [ head l | l &lt;- group (sort input), length l &gt; 1]<br></div></div></div>
        
      
        
        
          <div class="clojure"><div class="code"><span class="type">clojure</span><div class="body">(-&gt;&gt; '("andrew" "bob" "chris" "bob")<br>     (group-by identity) <br>     (filter #(&gt; (count (second %)) 1))<br>     (map first))</div></div></div>
        
      
        
        
          <div class="fantom"><div class="code"><span class="type">fantom</span><div class="body">nameCounts := Str:Int[:] { def = 0 }<br>["andrew", "bob", "chris", "bob"].each |Str v| { nameCounts[v]++ }<br>results := nameCounts.findAll |Int v, Str k-&gt;Bool| { v &gt; 1 }.keys<br>echo(results.join(","))</div></div></div>
        
      
        
        
      
    
  </div>
</div>
  </div>
<div class="subcategory">
      <div class="box">
      <b class="rtop">
        <b class="r1"></b> <b class="r2"></b> <b class="r3"></b> <b class="r4"></b>
      </b>
      <div class="content">

    <a href="http://langref.org/all-languages/lists/access">Access</a>
        </div>
      <b class="rbottom">
        <b class="r4"></b> <b class="r3"></b> <b class="r2"></b> <b class="r1"></b>
      </b>
    </div>

</div>
<div style="clear:both">
  <div id="subcategory27">
    <div class="problem">
  <h3><a href="http://langref.org/all-languages/lists/access/fetch-by-index">Fetch an element of a list by index</a></h3>
  <div class="solutions" id="problem54">
    Given the list <code>[One,&nbsp;Two,&nbsp;Three,&nbsp;Four,&nbsp;Five]</code>, fetch the third element (<code>'Three'</code>)
    
      
        
        
          <div class="ruby"><div class="code"><span class="type">ruby</span><div class="body">list = ['One', 'Two', 'Three', 'Four', 'Five']<br>list[2]<br></div><div class="body-multiple">['One', 'Two', 'Three', 'Four', 'Five'].fetch(2)<br></div><div class="body-multiple">list = ['One', 'Two', 'Three', 'Four', 'Five']<br>list.at(2)<br></div><div class="body-multiple">['One', 'Two', 'Three', 'Four', 'Five'][2]     # &lt;= note the [2] at end of array<br></div></div></div>
        
      
        
        
          <div class="java"><div class="code"><span class="type">java</span><div class="body">String result = list.get(2);</div></div></div>
        
      
        
        
          <div class="perl"><div class="code"><span class="type">perl</span><div class="body">qw(One Two Three Four Five)[2];</div><div class="body-multiple">@list = qw(One Two Three Four Five);<br>$list[2];</div></div></div>
        
      
        
        
          <div class="groovy"><div class="code"><span class="type">groovy</span><div class="body">list = ['One', 'Two', 'Three', 'Four', 'Five']<br>result = list[2] // index starts at 0</div></div></div>
        
      
        
        
          <div class="scala"><div class="code"><span class="type">scala</span><div class="body">val result = list(2)</div></div></div>
        
      
        
        
          <div class="python"><div class="code"><span class="type">python</span><div class="body">list = ['One', 'Two', 'Three', 'Four', 'Five']<br>list[2]</div></div></div>
        
      
        
        
          <div class="cpp"><div class="code"><span class="type">cpp</span><div class="body">String^ result = list[2];</div></div></div>
        
      
        
        
          <div class="fsharp"><div class="code"><span class="type">fsharp</span><div class="body">let result = List.nth ["One"; "Two"; "Three"; "Four"; "Five"] 2</div></div></div>
        
      
        
        
          <div class="erlang"><div class="code"><span class="type">erlang</span><div class="body">Result = lists:nth(3, List),</div><div class="body-multiple">Result = element(3, list_to_tuple(List)),</div><div class="body-multiple">{Left, _} = lists:split(3, List), Result = lists:last(Left),</div><div class="body-multiple">Result = nth0(2, List),</div></div></div>
        
      
        
        
          <div class="ocaml"><div class="code"><span class="type">ocaml</span><div class="body">let third = List.nth [ "One"; "Two"; "Three"; "Four"; "Five" ] 3;;</div></div></div>
        
      
        
        
          <div class="csharp"><div class="code"><span class="type">csharp</span><div class="body">string[] items = new string[] { "One", "Two", "Three", "Four", "Five" };<br>List&lt;string&gt; list = new List&lt;string&gt;(items);<br>string third = list[2];  // "Three"</div><div class="body-multiple">// Make sure you import the System.Linq namespace.<br>// This is not the preferred way of indexing if you are using Lists.<br>string[] items = new string[] { "One", "Two", "Three", "Four", "Five" };<br>IEnumerable&lt;string&gt; list = new List&lt;string&gt;(items);<br>string third = list.ElementAt(2);  // Three</div></div></div>
        
      
        
        
          <div class="php"><div class="code"><span class="type">php</span><div class="body">$list = array("One", "Two", "Three", "Four", "Five");<br>$three = $list[2];</div></div></div>
        
      
        
        
          <div class="haskell"><div class="code"><span class="type">haskell</span><div class="body">let a = [1..5]<br>let b = a !! 2<br>print b</div></div></div>
        
      
        
        
          <div class="clojure"><div class="code"><span class="type">clojure</span><div class="body">(nth '[One Two Three Four Five] 2)</div></div></div>
        
      
        
        
          <div class="fantom"><div class="code"><span class="type">fantom</span><div class="body">["One", "Two", "Three", "Four", "Five"][2]     </div><div class="body-multiple">["One", "Two", "Three", "Four", "Five"].get(2)</div></div></div>
        
      
        
        
          <div class="go"><div class="code"><span class="type">go</span><div class="body">fmt.Println(list[2])</div></div></div>
        
      
    
  </div>
</div><div class="problem">
  <h3><a href="http://langref.org/all-languages/lists/access/fetch-last">Fetch the last element of a list</a></h3>
  <div class="solutions" id="problem55">
    Given the list <code>[Red,&nbsp;Green,&nbsp;Blue]</code>, access the last element (<code>'Blue'</code>)
    
      
        
        
          <div class="ruby"><div class="code"><span class="type">ruby</span><div class="body">['Red', 'Green', 'Blue'][-1]</div><div class="body-multiple">['Red', 'Green', 'Blue'].at(-1)</div><div class="body-multiple">['Red', 'Green', 'Blue'].last</div><div class="body-multiple">['Red', 'Green', 'Blue'].fetch(-1)</div></div></div>
        
      
        
        
          <div class="java"><div class="code"><span class="type">java</span><div class="body">String result = list.get(list.size() - 1);</div></div></div>
        
      
        
        
          <div class="perl"><div class="code"><span class="type">perl</span><div class="body">qw(Red Green Blue)[-1];</div><div class="body-multiple">@list = qw(Red Green Blue);<br>$list[-1];<br></div></div></div>
        
      
        
        
          <div class="groovy"><div class="code"><span class="type">groovy</span><div class="body">list = ['Red', 'Green', 'Blue']<br>result = list[-1]</div><div class="body-multiple">list = ['Red', 'Green', 'Blue']<br>result = list.last()</div></div></div>
        
      
        
        
          <div class="scala"><div class="code"><span class="type">scala</span><div class="body">val result = list.last</div><div class="body-multiple">val result = (list.drop(list.length - 1)).head</div></div></div>
        
      
        
        
          <div class="python"><div class="code"><span class="type">python</span><div class="body">list = ['Red', 'Green', 'Blue']<br>list[-1]</div></div></div>
        
      
        
        
          <div class="cpp"><div class="code"><span class="type">cpp</span><div class="body">String^ result = list[list-&gt;Count - 1];</div><div class="body-multiple">string last_elem = lst.back();</div></div></div>
        
      
        
        
          <div class="fsharp"><div class="code"><span class="type">fsharp</span><div class="body">let last list =<br>    let rec last' list' =<br>        match list' with<br>        | [x]     -&gt; x<br>        | x :: xs -&gt; last' xs<br>    if List.is_empty list then failwith "empty list" else last' list<br><br>// ------<br><br>let result = last list</div><div class="body-multiple">let result = (List.nth list ((List.length list) - 1))</div><div class="body-multiple">let result = (List.hd (List.rev list))</div></div></div>
        
      
        
        
          <div class="erlang"><div class="code"><span class="type">erlang</span><div class="body">Result = lists:last(List),</div><div class="body-multiple">Result = last(List),</div><div class="body-multiple">Result = hd(lists:reverse(List)),</div><div class="body-multiple">Result = lists:nth(length(List), List),</div></div></div>
        
      
        
        
          <div class="ocaml"><div class="code"><span class="type">ocaml</span><div class="body">let list = [ "Red"; "Green"; "Blue" ] in<br>let last = List.nth list ( (List.length list) - 1 );;</div><div class="body-multiple">let list = [ "Red"; "Green"; "Blue" ] in<br>let last = List.hd (List.rev list);;</div><div class="body-multiple">let list_last l =<br>  let rec aux h q =<br>    match q with<br>    | [] -&gt; h<br>    | h :: q -&gt; aux h q in<br>  match l with<br>  | [] -&gt; invalid_arg "list_last"<br>  | h :: q -&gt; aux h q<br>;;<br>list_last ["Red"; "Green"; "Blue"]</div></div></div>
        
      
        
        
          <div class="csharp"><div class="code"><span class="type">csharp</span><div class="body">string[] items = new string[] { "Red", "Green", "Blue" };<br>List&lt;string&gt; list = new List&lt;string&gt;(items);<br>string last = list[list.Count - 1];  // "Blue"</div><div class="body-multiple">// Make sure you import the System.Linq namespace.<br>// This is not the preferred way of finding the last element if you are using Lists.<br>string[] items = new string[] { "Red", "Green", "Blue" };<br>IEnumerable&lt;string&gt; list = new List&lt;string&gt;(items);<br>string last = list.Last(); // "Blue"</div></div></div>
        
      
        
        
          <div class="php"><div class="code"><span class="type">php</span><div class="body">$list = array("Red", "Green", "Blue");<br>$last = array_pop($list);<br><br>// Be aware of that $list only contains two elements now - not three</div><div class="body-multiple">$list = array("Red", "Green", "Blue");<br>$last = $list[count($list)-1];</div></div></div>
        
      
        
        
          <div class="haskell"><div class="code"><span class="type">haskell</span><div class="body">last ["Red", "Green", "Blue"]</div></div></div>
        
      
        
        
          <div class="clojure"><div class="code"><span class="type">clojure</span><div class="body">(last '[One Two Three Four Five])</div></div></div>
        
      
        
        
          <div class="fantom"><div class="code"><span class="type">fantom</span><div class="body">["Red", "Green", "Blue"][-1]     </div><div class="body-multiple">["One", "Two", "Three", "Four", "Five"].last</div></div></div>
        
      
        
        
      
    
  </div>
</div><div class="problem">
  <h3><a href="http://langref.org/all-languages/lists/access/list-intersection">Find the common items in two lists</a></h3>
  <div class="solutions" id="problem67">
    Given two lists, find the common items. E.g. given beans = <code>['broad',&nbsp;'mung',&nbsp;'black',&nbsp;'red',&nbsp;'white']</code> and colors = <code>['black',&nbsp;'red',&nbsp;'blue',&nbsp;'green']</code>, what are the bean varieties that are also color names?
<br>
    
      
        
        
          <div class="ruby"><div class="code"><span class="type">ruby</span><div class="body">common = (beans.intersection(colors)).to_a</div></div></div>
        
      
        
        
          <div class="java"><div class="code"><span class="type">java</span><div class="body">List beans = Arrays.asList(new String[]{"broad", "mung", "black", "red", "white"});<br>List colors = Arrays.asList(new String[]{"black", "red", "blue", "green"});<br><br>List common = ListUtils.intersection(beans, colors);</div></div></div>
        
      
        
        
          <div class="perl"><div class="code"><span class="type">perl</span><div class="body">@beans = qw(broad mung black red white);<br>@colors = qw(black red blue green);<br>@seen{@beans} = ();<br>for (@colors) {<br>  push(@intersection, $_) if exists($seen{$_});<br>}<br>print join(', ', @intersection);<br></div><div class="body-multiple">@beans = qw(broad mung black red white);<br>@colors = qw(black red blue green);<br><br>my %colors_hash = map { $_ =&gt; 1 } @colors;<br>my @intersection = grep { $colors_hash{$_} } @beans;<br>print join(', ', @intersection),"\n";<br></div><div class="body-multiple">@beans = qw/broad mung black red white/;<br>@colors = qw/black red blue green/;<br> <br>print join ', ', grep { $_ ~~ @colors } @beans;<br></div></div></div>
        
      
        
        
          <div class="groovy"><div class="code"><span class="type">groovy</span><div class="body">beans = ['broad', 'mung', 'black', 'red', 'white']<br>colors = ['black', 'red', 'blue', 'green']<br>common = beans.intersect(colors)<br>assert common == ['black', 'red']</div></div></div>
        
      
        
        
          <div class="scala"><div class="code"><span class="type">scala</span><div class="body">val beans = "broad" :: "mung" :: "black" :: "red" :: "white" :: Nil<br>val colors = "black" :: "red" :: "blue" :: "green" :: Nil<br>val common = beans intersect colors</div></div></div>
        
      
        
        
          <div class="python"><div class="code"><span class="type">python</span><div class="body">beans = ['broad', 'mung', 'black', 'red', 'white']<br>colors = ['black', 'red', 'blue', 'green']<br><br>common = [b for b in beans if b in colors]</div><div class="body-multiple">beans = ['broad', 'mung', 'black', 'red', 'white']<br>colors = ['black', 'red', 'blue', 'green']<br><br>common = set(beans) &amp; set(colors)</div></div></div>
        
      
        
        
          <div class="cpp"><div class="code"><span class="type">cpp</span><div class="body">array&lt;String^&gt;^ inbeans = {"broad", "mung", "black", "red", "white"};<br>Generic::ICollection&lt;String^&gt;^ beans = makeSET&lt;String^&gt;(gcnew Generic::List&lt;String^&gt;((Generic::IEnumerable&lt;String^&gt;^) inbeans));<br><br>array&lt;String^&gt;^ incolors = {"black", "red", "blue", "green"};<br>Generic::ICollection&lt;String^&gt;^ colors = makeSET&lt;String^&gt;(gcnew Generic::List&lt;String^&gt;((Generic::IEnumerable&lt;String^&gt;^) incolors));<br><br>Generic::ICollection&lt;String^&gt;^ result = intersectSET&lt;String^&gt;(beans, colors);</div></div></div>
        
      
        
        
          <div class="fsharp"><div class="code"><span class="type">fsharp</span><div class="body">let beans = (Set.of_list ["broad"; "mung"; "black"; "red"; "white"])<br>let colors = (Set.of_list ["black"; "red"; "blue"; "green"])<br>let common = (Set.intersect beans colors)</div><div class="body-multiple">let beans = Set ["broad"; "mung"; "black"; "red"; "white"]<br>let colors = Set ["black"; "red"; "blue"; "green"]<br>let common = Set.intersect beans colors</div><div class="body-multiple">// Iterates elements of <br>//               list1 across Elements  of  list2 returning a list of string options<br>                                            // as generated by List.tryFind<br>let findCommon(list1 : 'a list, list2 : 'a list) : 'a list = <br>    list1 |&gt; List.map(fun y -&gt; list2 |&gt; List.tryFind(fun x -&gt; y = x))  <br>// Iterates elements of string option list generated above <br>//      returning a string list containing common elements of List1 and List2<br>          |&gt; List.fold(fun acc x -&gt; if x &lt;&gt; None then x.Value::acc else acc) [] <br>//      reverse order of list (can't seem to make List.foldBack work for this<br>          |&gt; List.rev<br><br>let beans = ["broad"; "mung"; "black"; "red"; "white"] <br>let colors = ["black"; "red"; "blue"; "green"] <br>printfn "%A" (findCommon(beans, colors)) ;;<br></div></div></div>
        
      
        
        
          <div class="erlang"><div class="code"><span class="type">erlang</span><div class="body">Beans = sets:from_list([broad, mung, black, red, white]), Colors = sets:from_list([black, red, blue, green]),<br><br>Common = sets:to_list(sets:intersection(Beans, Colors)),</div></div></div>
        
      
        
        
          <div class="ocaml"><div class="code"><span class="type">ocaml</span><div class="body">let beans = ["broad"; "mung"; "black"; "red"; "white"] <br><br>let colors = ["black"; "red"; "blue"; "green"]<br><br>let f common c = if List.mem c beans then c::common else common<br><br>let common = List.fold_left f [] colors;;<br><br>(* common will contain a list with the common elements *)</div><div class="body-multiple">(* using standard (functorized) sets *)<br><br>module SetTools(ASet: Set.S) =<br>struct<br>  let of_list l =<br>    List.fold_left (fun acc e -&gt; ASet.add e acc) ASet.empty l<br><br>  let find_common l1 l2 =<br>    ASet.elements (ASet.inter (of_list l1) (of_list l2))<br>end<br><br>module StringSet = Set.Make(String)<br><br>module StringSetTools = SetTools(StringSet)<br>;;<br>let beans = ["broad"; "mung"; "black"; "red"; "white"] in<br>let colors = ["black"; "red"; "blue"; "green"] in<br>StringSetTools.find_common beans colors;;<br></div></div></div>
        
      
        
        
          <div class="csharp"><div class="code"><span class="type">csharp</span><div class="body">// Make sure you import the System.Linq namespace.<br>// This example uses arrays as the underlying implementation, but any IEnumerable type can be used - including List.<br>IEnumerable&lt;string&gt; beans = new string[] { "beans", "mung", "black", "red", "white" };<br>IEnumerable&lt;string&gt; colors = new string[] { "black", "red", "blue", "green" };<br>var intersect = beans.Intersect(colors); // ['red', 'black']</div></div></div>
        
      
        
        
          <div class="php"><div class="code"><span class="type">php</span><div class="body">$result = array_intersect($beans, $colors);<br>sort($result); // just to clean it up :)</div></div></div>
        
      
        
        
          <div class="haskell"><div class="code"><span class="type">haskell</span><div class="body">import Data.List<br><br>beans = ["broad", "mung", "black", "red", "white"]<br>colors = ["black", "red", "blue", "green"]<br><br>main = print (intersect beans colors)</div></div></div>
        
      
        
        
          <div class="clojure"><div class="code"><span class="type">clojure</span><div class="body">(use 'clojure.set)<br><br>(let [beans '[broad mung black red white]<br>      colors '[black red blue green]]<br>  (intersection (set beans) (set colors)))<br></div></div></div>
        
      
        
        
          <div class="fantom"><div class="code"><span class="type">fantom</span><div class="body">beans := ["broad", "mung", "black", "red", "white"]<br>colors := ["black", "red", "blue", "green"]<br>echo(beans.intersection(colors))  </div></div></div>
        
      
        
        
      
    
  </div>
</div><div class="problem">
  <h3><a href="http://langref.org/all-languages/lists/access/list-unique">Display the unique items in a list</a></h3>
  <div class="solutions" id="problem69">
    Display the unique items in a list, e.g. given ages = <code>[18,&nbsp;16,&nbsp;17,&nbsp;18,&nbsp;16,&nbsp;19,&nbsp;14,&nbsp;17,&nbsp;19,&nbsp;18]</code>, display the unique elements, i.e. with duplicates removed.
<br>
    
      
        
        
          <div class="ruby"><div class="code"><span class="type">ruby</span><div class="body">ages = [18, 16, 17, 18, 16, 19, 14, 17, 19, 18]<br>p ages.uniq</div><div class="body-multiple">ages = [18, 16, 17, 18, 16, 19, 14, 17, 19, 18]<br>ages.uniq!<br>p ages</div><div class="body-multiple">ages = (Set.new [18, 16, 17, 18, 16, 19, 14, 17, 19, 18]).to_a<br>p ages</div></div></div>
        
      
        
        
          <div class="java"><div class="code"><span class="type">java</span><div class="body">Set&lt;Integer&gt; ages = new TreeSet&lt;Integer&gt;(Arrays.asList(new Integer[]{18, 16, 17, 18, 16, 19, 14, 17, 19, 18}));<br><br>System.out.println(ages);</div></div></div>
        
      
        
        
          <div class="perl"><div class="code"><span class="type">perl</span><div class="body">@ages = (18, 16, 17, 18, 16, 19, 14, 17, 19, 18);<br>@seen{@ages} = ();<br>@unique = keys %seen;<br>print join(', ', @unique);<br></div><div class="body-multiple">@ages = (18, 16, 17, 18, 16, 19, 14, 17, 19, 18);<br>@unique = grep(!$seen{$_}++, @ages);<br>print join(', ', @unique);<br></div><div class="body-multiple">@ages = (18, 16, 17, 18, 16, 19, 14, 17, 19, 18);<br>print join(', ', grep(!$seen{$_}++, @ages));<br></div><div class="body-multiple">@ages = (18, 16, 17, 18, 16, 19, 14, 17, 19, 18);<br>for (@ages) {<br>  push(@unique, $_) unless $seen{$_}++;<br>}<br>print join(', ', @unique);<br></div><div class="body-multiple">use List::MoreUtils qw(uniq);<br><br>@ages = (18, 16, 17, 18, 16, 19, 14, 17, 19, 18);<br>print join(', ', uniq(@ages));<br></div></div></div>
        
      
        
        
          <div class="groovy"><div class="code"><span class="type">groovy</span><div class="body">ages = [18, 16, 17, 18, 16, 19, 14, 17, 19, 18]<br>println ages.unique()<br></div><div class="body-multiple">ages = [18, 16, 17, 18, 16, 19, 14, 17, 19, 18]<br>unique = ages as Set<br>println unique</div></div></div>
        
      
        
        
          <div class="scala"><div class="code"><span class="type">scala</span><div class="body">val ages = (18 :: 16 :: 17 :: 18 :: 16 :: 19 :: 14 :: 17 :: 19 :: 18 :: Nil) removeDuplicates</div></div></div>
        
      
        
        
          <div class="python"><div class="code"><span class="type">python</span><div class="body">ages = [18, 16, 17, 18, 16, 19, 14, 17, 19, 18]<br><br>unique_ages = list(set(ages))</div></div></div>
        
      
        
        
          <div class="cpp"><div class="code"><span class="type">cpp</span><div class="body">array&lt;int&gt;^ input = {18, 16, 17, 18, 16, 19, 14, 17, 19, 18};<br>Generic::List&lt;int&gt;^ ages = gcnew Generic::List&lt;int&gt;((Generic::IEnumerable&lt;int&gt;^) input);<br><br>Generic::ICollection&lt;int&gt;^ result = makeSET&lt;int&gt;(ages);</div><div class="body-multiple">list&lt;int&gt; input;<br>input += 18, 16, 17, 18, 16, 19, 14, 17, 19, 18;<br>input.sort();<br>unique_copy(input.begin(), input.end(), ostream_iterator&lt;int&gt;(cout, "\n"));</div></div></div>
        
      
        
        
          <div class="fsharp"><div class="code"><span class="type">fsharp</span><div class="body">(Set.ofList [18; 16; 17; 18; 16; 19; 14; 17; 19; 18]) |&gt; Set.iter (fun age -&gt; printf "%d, " age)</div></div></div>
        
      
        
        
          <div class="erlang"><div class="code"><span class="type">erlang</span><div class="body">Ages = sets:to_list(sets:from_list([18, 16, 17, 18, 16, 19, 14, 17, 19, 18])), io:format("~w~n", [Ages]).</div><div class="body-multiple">lists:usort([18, 16, 17, 18, 16, 19, 14, 17, 19, 18]).<br></div></div></div>
        
      
        
        
          <div class="ocaml"><div class="code"><span class="type">ocaml</span><div class="body">let ages = [18; 16; 17; 18; 16; 19; 14; 17; 19; 18]<br><br>let f res e = if List.mem e res then res else e::res<br><br>let unique = List.fold_left f [] ages;;</div><div class="body-multiple">(* using standard (functorized) sets *)<br><br>module SetTools(ASet: Set.S) =<br>struct<br>  let of_list l =<br>    List.fold_left (fun acc e -&gt; ASet.add e acc) ASet.empty l<br><br>  let unique l =<br>    ASet.elements (of_list l)<br>end<br><br>module Integer =<br>struct<br>  type t = int<br>  let compare (x:t) y = Pervasives.compare x y<br>end<br><br>module IntegerSet = Set.Make(Integer)<br>module IntegerSetTools = SetTools(IntegerSet)<br>;;<br>IntegerSetTools.unique [18; 16; 17; 18; 16; 19; 14; 17; 19; 18];;<br></div><div class="body-multiple">let removeDuplicate list = <br>  let rec aux acc = function <br>   | [] -&gt; acc<br>   | h :: t -&gt; if (List.mem h t) then aux acc t else aux (h::acc) t<br>  in <br>  List.rev (aux [] list);;</div></div></div>
        
      
        
        
          <div class="csharp"><div class="code"><span class="type">csharp</span><div class="body">using System.Collections.Generic;<br>using System.Linq;<br>public class UniqueElements {<br>    public static void Main() {<br>        var list = new List&lt;int&gt;() { 18, 16, 17, 18, 16, 19, 14, 17, 19, 18 };<br>        var uniques = list.Distinct();<br>    }<br>}<br></div></div></div>
        
      
        
        
          <div class="php"><div class="code"><span class="type">php</span><div class="body">$ages = array(18, 16, 17, 18, 16, 19, 14, 17, 19, 18);<br>$ages = array_unique($ages);<br>// be aware of that $ages[6] will print 14</div></div></div>
        
      
        
        
          <div class="haskell"><div class="code"><span class="type">haskell</span><div class="body">import Data.List<br><br>ages = [18, 16, 17, 18, 16, 19, 14, 17, 19, 18]<br><br>uniqueAges = nub ages</div></div></div>
        
      
        
        
          <div class="clojure"><div class="code"><span class="type">clojure</span><div class="body">;; returns a set<br>(set [18, 16, 17, 18, 16, 19, 14, 17, 19, 18])<br>;;#{14 16 17 18 19}<br><br>;; returns a lazy sequence of the unique elements<br>(distinct [18, 16, 17, 18, 16, 19, 14, 17, 19, 18])<br>;;(18 16 17 19 14)<br><br><br></div></div></div>
        
      
        
        
          <div class="fantom"><div class="code"><span class="type">fantom</span><div class="body">uniqueAges := [18, 16, 17, 18, 16, 19, 14, 17, 19, 18].unique<br>echo(uniqueAges)     </div></div></div>
        
      
        
        
      
    
  </div>
</div>
  </div>
<div class="subcategory">
      <div class="box">
      <b class="rtop">
        <b class="r1"></b> <b class="r2"></b> <b class="r3"></b> <b class="r4"></b>
      </b>
      <div class="content">

    <a href="http://langref.org/all-languages/lists/modification">Modification</a>
        </div>
      <b class="rbottom">
        <b class="r4"></b> <b class="r3"></b> <b class="r2"></b> <b class="r1"></b>
      </b>
    </div>

</div>
<div style="clear:both">
  <div id="subcategory28">
    <div class="problem">
  <h3><a href="http://langref.org/all-languages/lists/modification/remove-by-index">Remove an element from a list by index</a></h3>
  <div class="solutions" id="problem56">
    Given the list <code>[Apple,&nbsp;Banana,&nbsp;Carrot]</code>, remove the first element to produce the list <code>[Banana,&nbsp;Carrot]</code>
    
      
        
        
          <div class="ruby"><div class="code"><span class="type">ruby</span><div class="body">['Apple', 'Banana', 'Carrot'].shift</div><div class="body-multiple">fruit.delete_at(0)</div></div></div>
        
      
        
        
          <div class="java"><div class="code"><span class="type">java</span><div class="body">list.remove(0);</div></div></div>
        
      
        
        
          <div class="perl"><div class="code"><span class="type">perl</span><div class="body">@list = qw(Apple Banana Carrot);<br>shift @list;<br></div><div class="body-multiple">@list = qw(Apple Banana Carrot);<br>$offset = 0;<br>splice(@list, $offset, 1);<br></div></div></div>
        
      
        
        
          <div class="groovy"><div class="code"><span class="type">groovy</span><div class="body">// to produce a new list<br>newlist = list.tail()     // for 'Apple' at start<br>newlist = list - 'Apple'  // for 'Apple' anywhere</div><div class="body-multiple">// mutate original list<br>list.remove(0)</div></div></div>
        
      
        
        
          <div class="scala"><div class="code"><span class="type">scala</span><div class="body">val (fl, fr) = fruit.splitAt(0) ; fruit = fl ::: fr.tail</div><div class="body-multiple">fruit = fruit.tail</div><div class="body-multiple">fruit = fruit.drop(1)</div><div class="body-multiple">fruits = fruits.remove(fruits.indexOf(_) == 0)</div><div class="body-multiple">fruits.filterNot(fruits.indexOf(_) == 0)</div></div></div>
        
      
        
        
          <div class="python"><div class="code"><span class="type">python</span><div class="body">myList = ['Apple', 'Banana', 'Carrot']<br>print myList<br>del myList[0]<br># or<br>myList.pop(0) # returns 'Apple'<br>print myList<br></div></div></div>
        
      
        
        
          <div class="cpp"><div class="code"><span class="type">cpp</span><div class="body">fruit-&gt;RemoveAt(0);</div></div></div>
        
      
        
        
          <div class="fsharp"><div class="code"><span class="type">fsharp</span><div class="body">let split_at list n =<br>    let rec split_at' list' n' left right =<br>        match list' with<br>        | []      -&gt; (List.rev left, List.rev right)<br>        | x :: xs -&gt; if n' &lt;= n then split_at' xs (n' + 1) (x :: left) right else split_at' xs (n' + 1) left (x :: right)<br>    split_at' list 0 [] []<br><br>// ------<br><br>let (_, right) = split_at fruit 0</div><div class="body-multiple">let drop list n =<br>    if n &lt;= 0 then<br>        list<br>    else<br>        let (_, right) = split_at list (n - 1)<br>        right<br><br>// ------<br><br>let result = (drop fruit 1)</div></div></div>
        
      
        
        
          <div class="erlang"><div class="code"><span class="type">erlang</span><div class="body">Result = tl(List),</div><div class="body-multiple">[_|Result] = List,</div><div class="body-multiple">N = 1, {Left, Right} = lists:split(N - 1, List), Result = Left ++ tl(Right),</div><div class="body-multiple">Result = drop(1, List),</div></div></div>
        
      
        
        
          <div class="ocaml"><div class="code"><span class="type">ocaml</span><div class="body">let delete_at i al =<br>  if i &lt; 0 || i &gt;= List.length al then<br>    invalid_arg "delete_at"<br>  else<br>   let rec del i l =<br>      match l with<br>      | [] -&gt; []<br>      | h::t when i = 0 -&gt; t<br>      | h::t -&gt; h :: del (i-1) t<br>   in<br>   del i al<br> ;;</div><div class="body-multiple">let rem_first l = <br>  match l with            <br>  | [] -&gt; []<br>  | h::t -&gt; t <br>;;</div><div class="body-multiple">List.tl ["Apple"; "Banana"; "Carrot"]</div></div></div>
        
      
        
        
          <div class="csharp"><div class="code"><span class="type">csharp</span><div class="body">class Solution1516<br>{<br>    static void Main()<br>    {<br>        List&lt;string&gt; fruit = new List&lt;string&gt;() { "Apple", "Banana", "Carrot" };<br>        fruit.RemoveAt(0);<br>    }<br>}<br></div></div></div>
        
      
        
        
          <div class="php"><div class="code"><span class="type">php</span><div class="body">$list = array("Apple", "Banana", "Carrot");<br>unset($list[0]);<br><br>// Be aware of that $list[0] isn't set. "Banana" is still $list[1]</div><div class="body-multiple">$list = array("Apple", "Banana", "Carrot");<br>array_shift($list);<br><br>// Be aware of that $list[0] is set to "Banana"</div></div></div>
        
      
        
        
          <div class="haskell"><div class="code"><span class="type">haskell</span><div class="body">deleteNth n xs | n &gt; 0 = take (n-1) xs ++ drop n xs<br><br>main = print $ deleteNth 1 [1..3]<br></div><div class="body-multiple">fruit :: [String]<br>fruit = ["Apple", "Banana", "Carrot"]<br><br>main :: IO ()<br>main = putStrLn $ show $ tail fruit</div></div></div>
        
      
        
        
          <div class="clojure"><div class="code"><span class="type">clojure</span><div class="body">(let [fruit ["Apple" "Banana" "Carrot"]<br>      index 0]<br>  (concat<br>    (take index fruit)<br>    (drop (+ index 1) fruit)))<br></div><div class="body-multiple">(let [v ["Apple" "Banana" "Carrot"]<br>      index 0]<br>  (into (subvec v 0 n) (subvec v (inc n))))</div></div></div>
        
      
        
        
          <div class="fantom"><div class="code"><span class="type">fantom</span><div class="body">list := ["Apple", "Banana", "Carrot"]<br>list.removeAt(0)     </div></div></div>
        
      
        
        
          <div class="go"><div class="code"><span class="type">go</span><div class="body">offset := 0<br>list = append(list[:offset], list[offset+1:]...)</div></div></div>
        
      
    
  </div>
</div><div class="problem">
  <h3><a href="http://langref.org/all-languages/lists/modification/remove-last">Remove the last element of a list</a></h3>
  <div class="solutions" id="problem57">
    
    
      
        
        
          <div class="ruby"><div class="code"><span class="type">ruby</span><div class="body">list = ['Apple', 'Banana', 'Carrot']<br>list.delete_at(-1)</div><div class="body-multiple">list = ['Apple', 'Banana', 'Carrot']<br>list.pop<br></div></div></div>
        
      
        
        
          <div class="java"><div class="code"><span class="type">java</span><div class="body">list.remove(list.size() - 1);</div></div></div>
        
      
        
        
          <div class="perl"><div class="code"><span class="type">perl</span><div class="body">pop @list;</div></div></div>
        
      
        
        
          <div class="groovy"><div class="code"><span class="type">groovy</span><div class="body">list = ['Apple', 'Banana', 'Carrot']<br>// to produce a new list<br>newlist = list[0,1]<br>// to modify original list<br>list.remove(2)</div><div class="body-multiple">list = ['Apple', 'Banana', 'Carrot']<br><br>result = list[0,-2]<br><br>//or using ranges<br>result = list[0..-2]</div></div></div>
        
      
        
        
          <div class="scala"><div class="code"><span class="type">scala</span><div class="body">fruit = fruit.init</div><div class="body-multiple">fruit = fruit.take(fruit.length - 1)</div></div></div>
        
      
        
        
          <div class="python"><div class="code"><span class="type">python</span><div class="body">myList = ['Apple', 'Banana', 'Carrot']<br>myList.pop()<br><br></div></div></div>
        
      
        
        
          <div class="cpp"><div class="code"><span class="type">cpp</span><div class="body">fruit-&gt;RemoveAt(fruit-&gt;Count - 1);</div></div></div>
        
      
        
        
          <div class="fsharp"><div class="code"><span class="type">fsharp</span><div class="body">let take list n =<br>    if n &lt;= 0 then<br>        list<br>    else<br>        let (left, _) = split_at list (n - 1)<br>        left<br><br>// ------<br><br>let result = (take fruit ((List.length fruit) - 1))</div><div class="body-multiple">let but_last list =<br>    let rec but_last' list' acc =<br>        match list' with<br>        | [x]     -&gt; List.rev acc<br>        | x :: xs -&gt; but_last' xs (x :: acc)<br>    if List.is_empty list then [] else but_last' list []<br><br>// ------<br><br>let result = (but_last fruit)</div></div></div>
        
      
        
        
          <div class="erlang"><div class="code"><span class="type">erlang</span><div class="body">Result = init(List),</div><div class="body-multiple">Result = take(length(List) - 1, List),</div><div class="body-multiple">Result = lists:reverse(tl(lists:reverse(List))),</div><div class="body-multiple">lists:sublist(List,length(List)-1)</div></div></div>
        
      
        
        
          <div class="ocaml"><div class="code"><span class="type">ocaml</span><div class="body">let remove_last list = <br>   match (List.rev list) with<br>   | h::t -&gt; List.rev t<br>   | []   -&gt; []</div><div class="body-multiple">let remove_last lst =<br>  List.rev (List.tl (List.rev lst))</div><div class="body-multiple">let list_remove_last l =<br>  let rec aux h q acc =<br>    match q with<br>    | [] -&gt; List.rev acc<br>    | h2 :: q -&gt; aux h2 q (h :: acc) in<br>  match l with<br>  | [] -&gt; invalid_arg "list_remove_last"<br>  | h :: q -&gt; aux h q []<br></div></div></div>
        
      
        
        
          <div class="csharp"><div class="code"><span class="type">csharp</span><div class="body">List&lt;string&gt; fruits = new List() { "apple", "banana", "cherry" };<br>fruits.RemoveAt(fruits.Length - 1);</div></div></div>
        
      
        
        
          <div class="php"><div class="code"><span class="type">php</span><div class="body">$list = array("Apple", "Banana", "Carrot");<br>unset($list[count($list)-1]);<br><br>// Be aware of that <br>// $list[] = "Orange";<br>// will be $list[3] and not $list[2]</div><div class="body-multiple">$list = array("Apple", "Banana", "Carrot");<br>array_pop($list);</div></div></div>
        
      
        
        
          <div class="haskell"><div class="code"><span class="type">haskell</span><div class="body">ages = [1,2,3,4]<br><br>init ages</div></div></div>
        
      
        
        
          <div class="clojure"><div class="code"><span class="type">clojure</span><div class="body">(pop ["Apple" "Banana" "Carrot"])</div></div></div>
        
      
        
        
          <div class="fantom"><div class="code"><span class="type">fantom</span><div class="body">list := ["Apple", "Banana", "Carrot"]<br>list.removeAt(-1)  </div><div class="body-multiple">list := ["Apple", "Banana", "Carrot"]¨<br>list.pop     </div></div></div>
        
      
        
        
      
    
  </div>
</div><div class="problem">
  <h3><a href="http://langref.org/all-languages/lists/modification/rotate">Rotate a list</a></h3>
  <div class="solutions" id="problem58">
    Given a list <code>["apple",&nbsp;"orange",&nbsp;"grapes",&nbsp;"bananas"]</code>, rotate it by removing the first item and placing it on the end to yield <code>["orange",&nbsp;"grapes",&nbsp;"bananas",&nbsp;"apple"]</code>
    
      
        
        
          <div class="ruby"><div class="code"><span class="type">ruby</span><div class="body">items = ["apple", "orange", "grapes", "bananas"] <br>items &lt;&lt; first = items.shift <br><br># items is rotated<br># first contains the first value in the list <br> </div></div></div>
        
      
        
        
          <div class="java"><div class="code"><span class="type">java</span><div class="body">list.add(list.remove(0));</div><div class="body-multiple">Collections.rotate(list, -1);</div></div></div>
        
      
        
        
          <div class="perl"><div class="code"><span class="type">perl</span><div class="body">@list = qw(apple, orange, grapes, bananas);<br>push @list, shift @list;</div><div class="body-multiple">@list = qw(apple orange grapes bananas);<br>@list = @list[1..$#list,0];<br></div></div></div>
        
      
        
        
          <div class="groovy"><div class="code"><span class="type">groovy</span><div class="body">first = items.head()<br>items = items.tail() + first</div><div class="body-multiple">items = items[1..-1] + items[0]</div><div class="body-multiple">items = items + items.remove(0)</div></div></div>
        
      
        
        
          <div class="scala"><div class="code"><span class="type">scala</span><div class="body">items = items.tail ::: List(items.head)</div><div class="body-multiple">items = (items.head :: ((items.tail).reverse)).reverse</div></div></div>
        
      
        
        
          <div class="python"><div class="code"><span class="type">python</span><div class="body">l = ["apple", "orange", "grapes", "bananas"]<br>first, l = l[0], l[1:] + l[:1]</div><div class="body-multiple">fruit = ['apple', 'orange', 'grapes', 'bananas']<br>fruit.append(fruit.pop(0))</div></div></div>
        
      
        
        
          <div class="cpp"><div class="code"><span class="type">cpp</span><div class="body">fruit-&gt;Add(fruit[0]); fruit-&gt;RemoveAt(0);</div><div class="body-multiple">rotate(fruit.begin(), fruit.begin()+1, fruit.end());</div></div></div>
        
      
        
        
          <div class="fsharp"><div class="code"><span class="type">fsharp</span><div class="body">let rotate list n =<br>    if n &lt;= 0 then<br>        list<br>    else<br>        let (left, right) = split_at list (n - 1)<br>        right @ left<br><br>// ------<br><br>let result = (rotate fruit 1)</div></div></div>
        
      
        
        
          <div class="erlang"><div class="code"><span class="type">erlang</span><div class="body">N = 1, {Left, Right} = lists:split(N, List), Result = Right ++ Left,</div><div class="body-multiple">N = 1, Result = rotate(N, List),</div></div></div>
        
      
        
        
          <div class="ocaml"><div class="code"><span class="type">ocaml</span><div class="body">let rotate list =<br>   match list with<br>   | head::tail -&gt; tail@[head]<br>   | []         -&gt; []<br></div></div></div>
        
      
        
        
          <div class="csharp"><div class="code"><span class="type">csharp</span><div class="body">var lst = new LinkedList&lt;String&gt;(new String[] {"apple", "orange", "grapes", "banana"});<br>lst.AddLast(lst.First());<br>lst.DeleteFirst();</div></div></div>
        
      
        
        
          <div class="php"><div class="code"><span class="type">php</span><div class="body">$list = array("Apple", "Orange", "Grapes", "Banana");<br>$first = array_shift($list); //get and remove the first<br>array_push($list, $first); //prepend the $first to the array</div></div></div>
        
      
        
        
          <div class="haskell"><div class="code"><span class="type">haskell</span><div class="body">main = print $ rotate ["apple", "orange", "grapes", "bananas"]<br><br>rotate xs | length xs &lt; 2 = xs<br>          | otherwise     = tail xs ++ [head xs] </div></div></div>
        
      
        
        
          <div class="clojure"><div class="code"><span class="type">clojure</span><div class="body">(let [fruit ["apple" "orange" "grapes" "bananas"]]<br>  (concat (rest fruit) [(first fruit)])</div></div></div>
        
      
        
        
          <div class="fantom"><div class="code"><span class="type">fantom</span><div class="body">list := ["apple", "orange", "grapes", "bananas"] <br>list.add(list.removeAt(0))     </div></div></div>
        
      
        
        
      
    
  </div>
</div>
  </div>
<div class="subcategory">
      <div class="box">
      <b class="rtop">
        <b class="r1"></b> <b class="r2"></b> <b class="r3"></b> <b class="r4"></b>
      </b>
      <div class="content">

    <a href="http://langref.org/all-languages/lists/manipulation">Manipulation</a>
        </div>
      <b class="rbottom">
        <b class="r4"></b> <b class="r3"></b> <b class="r2"></b> <b class="r1"></b>
      </b>
    </div>

</div>
<div style="clear:both">
  <div id="subcategory32">
    <div class="problem">
  <h3><a href="http://langref.org/all-languages/lists/manipulation/list-gather">Gather together corresponding elements from multiple lists</a></h3>
  <div class="solutions" id="problem66">
    Given several lists, gather together the first element from every list, the second element from every list, and so on for all corresponding index values in the lists. E.g. for these three lists, first = <code>['Bruce',&nbsp;'Tommy&nbsp;Lee',&nbsp;'Bruce']</code>, last = <code>['Willis',&nbsp;'Jones',&nbsp;'Lee']</code>, years = <code>[1955,&nbsp;1946,&nbsp;1940]</code> the result should produce 3 actors. The middle actor should be Tommy Lee Jones.
<br>
    
      
        
        
          <div class="ruby"><div class="code"><span class="type">ruby</span><div class="body">first = ['Bruce', 'Tommy Lee', 'Bruce']; last = ['Willis', 'Jones', 'Lee']; years = [1955, 1946, 1940]<br><br>result = first.zip(last, years)</div><div class="body-multiple">first = ['Bruce', 'Tommy Lee', 'Bruce']; last = ['Willis', 'Jones', 'Lee']; years = [1955, 1946, 1940]<br><br>result = [first, last, years].transpose</div></div></div>
        
      
        
        
          <div class="java"><div class="code"><span class="type">java</span><div class="body">String[] first = new String[]{"Bruce", "Tommy Lee", "Bruce"};<br>String[] last = new String[]{"Willis", "Jones", "Lee"};<br>String[] years = new String[]{"1955", "1946", "1940"};<br><br>List&lt;String[]&gt; list = new ArrayList&lt;String[]&gt;(); list.add(first); list.add(last); list.add(years);<br><br>String[] result = zip(",", list);</div></div></div>
        
      
        
        
          <div class="perl"><div class="code"><span class="type">perl</span><div class="body">my @first = ('Bruce', 'Tommy Lee', 'Bruce');<br>my @last  = ('Willis', 'Jones', 'Lee');<br>my @years = (1955, 1946, 1940);<br><br>my @actors;<br><br>my $max = scalar @first;<br>for my $index (0 .. $max) {<br>    push @actors, [ $first[$index], $last[$index], $years[$index] ];<br>};</div></div></div>
        
      
        
        
          <div class="groovy"><div class="code"><span class="type">groovy</span><div class="body">first = ['Bruce', 'Tommy Lee', 'Bruce']<br>last = ['Willis', 'Jones', 'Lee']<br>years = [1955, 1946, 1940]<br>actors = [first, last, years].transpose()<br>assert actors.size() == 3<br>assert actors[1] == ['Tommy Lee', 'Jones', 1946]<br></div></div></div>
        
      
        
        
          <div class="scala"><div class="code"><span class="type">scala</span><div class="body">def zip3(l1 : List[_], l2 : List[_],l3 : List[_]) : List[Tuple3[_, _, _]] =<br>{<br>   def zip3$ (l1$ : List[_], l2$ : List[_], l3$ : List[_], acc : List[Tuple3[_, _, _]]) : List[Tuple3[_, _, _]] = l1$ match<br>   {<br>      case Nil                =&gt; acc reverse<br>      case l1$head :: l1$tail =&gt; zip3$(l1$tail, l2$.tail, l3$.tail, Tuple3(l1$head, l2$.head, l3$.head) :: acc)<br>   }<br><br>   zip3$(l1, l2, l3, List[Tuple3[_,_,_]]())<br>}<br><br>// ------<br><br>val result = zip3(first, last, years)</div><div class="body-multiple">val first = List("Bruce", "Tommy Lee", "Bruce")<br>val last = List("Willis", "Jones", "Lee")<br>val years = List(1955, 1946, 1940)<br>val results = (first, last, years).zipped.toList<br>println(results)</div></div></div>
        
      
        
        
          <div class="python"><div class="code"><span class="type">python</span><div class="body">first = ['Bruce', 'Tommy Lee', 'Bruce']<br>last = ['Willis', 'Jones', 'Lee']<br>years = [1955, 1946, 1940]<br><br>actors = zip(first, last, years)<br><br>assert len(actors) == 3<br>assert actors[1] == ('Tommy Lee', 'Jones', 1946)<br></div></div></div>
        
      
        
        
          <div class="cpp"><div class="code"><span class="type">cpp</span><div class="body">array&lt;String^&gt;^ first = {"Bruce", "Tommy Lee", "Bruce"}; array&lt;String^&gt;^ last = {"Willis", "Jones", "Lee"}; array&lt;String^&gt;^ years = {"1955", "1946", "1940"};<br><br>array&lt;String^&gt;^ result = zip&lt;String^&gt;(",", first, last, years);</div><div class="body-multiple">list&lt;string&gt; first = { "Bruce", "Tommy Lee", "Bruce" };<br>list&lt;string&gt; last = {"Willis", "Jones", "Lee"};<br>list&lt;int&gt; years = {1955, 1946, 1940};<br>list&lt;tuple&lt;string,string,int&gt; &gt; actors;<br><br>for (firstIt = first.begin(), lastIt = last.begin(), yearIt = years.begin();<br>     firstIt != first.end() &amp;&amp; lastIt != last.end() &amp;&amp; yearIt != years.end();<br>     ++firstIt, ++lastIt, ++yearIt)<br>    actors.push_back(make_tuple(*firstIt, *lastIt, *yearIt));</div></div></div>
        
      
        
        
          <div class="fsharp"><div class="code"><span class="type">fsharp</span><div class="body">let result = (List.zip3 first last years)</div></div></div>
        
      
        
        
          <div class="erlang"><div class="code"><span class="type">erlang</span><div class="body">First = ['Bruce', 'Tommy Lee', 'Bruce'], Last = ['Willis', 'Jones', 'Lee'], Years = [1955, 1946, 1940],<br><br>Result = lists:zip3(First, Last, Years),</div></div></div>
        
      
        
        
          <div class="ocaml"><div class="code"><span class="type">ocaml</span><div class="body">let rec combine3 f l y =<br>  match f, l, y with<br>  | [], [], [] -&gt; []<br>  | fh :: fq, lh :: lq, yh :: yq -&gt;<br>    (fh, lh, yh) :: combine3 fq lq yq<br>  | _ -&gt; invalid_arg "combine3"<br>;;<br>let first = ["Bruce"; "Tommy Lee"; "Bruce"] in<br>let last = ["Willis"; "Jones"; "Lee"] in<br>let years = [1955; 1946; 1940] in<br>combine3 first last years<br></div></div></div>
        
      
        
        
          <div class="csharp"><div class="code"><span class="type">csharp</span><div class="body">String[] first = { "Bruce", "Tommy Lee", "Bruce" };<br>String[] last = { "Willis", "Jones", "Lee" };<br>int[] years = { 1955, 1946, 1940 };<br>var actors = first.Zip(last, (f, l) =&gt; Tuple.Create(f, l)).Zip(years, (t, y) =&gt; Tuple.Create(t.Item1, t.Item2, y)).ToArray();<br>Debug.Assert(actors[1].Equals(Tuple.Create("Tommy Lee", "Jones", 1946)));</div></div></div>
        
      
        
        
          <div class="php"><div class="code"><span class="type">php</span><div class="body">for ($i = 0; $i &lt; $count; $i++) {<br>	$list[] = array($first[$i], $last[$i], $years[$i]);<br>}</div><div class="body-multiple">$list = array_map(NULL, $first, $last, $years);</div></div></div>
        
      
        
        
          <div class="haskell"><div class="code"><span class="type">haskell</span><div class="body">import Prelude hiding (last)<br><br>first = ["Bruce", "Tommy Lee", "Bruce"]<br>last = ["Willis", "Jones", "Lee"]<br>years = [1955, 1946, 1940] <br><br>actors = zip3 first last years<br></div></div></div>
        
      
        
        
          <div class="clojure"><div class="code"><span class="type">clojure</span><div class="body">(defn gatherer [listOfLists]<br>  (if (empty? (first listOfLists))<br>    () ; the base case for recursion<br>    (cons <br>      (map first listOfLists) ; get the first element of each of the lists<br>      (gatherer (map rest listOfLists)) ; gather all the subsequent ones<br>      )<br>    )<br>  )<br><br>(def firstnames '("Bruce" "Tommy Lee" "Bruce"))<br>(def lastnames '("Willis" "Jones" "Lee"))<br>(def years '(1955 1946 1940))<br><br>(println (gatherer [firstnames lastnames years]))<br><br>; -&gt; ((Bruce Willis 1955) (Tommy Lee Jones 1946) (Bruce Lee 1940))<br></div><div class="body-multiple">(def firstnames ["Bruce" "Tommy Lee" "Bruce"])<br>(def lastnames ["Willis" "Jones" "Lee"])<br>(def years [1955 1946 1940])<br>(println (map (fn [f l y] [f l y]) firstnames lastnames years))<br></div></div></div>
        
      
        
        
          <div class="fantom"><div class="code"><span class="type">fantom</span><div class="body">r := [,]<br>first.size.times |Int i| { r.add([first[i], last[i], years[i]]) }<br><br>echo(r)  </div></div></div>
        
      
        
        
      
    
  </div>
</div><div class="problem">
  <h3><a href="http://langref.org/all-languages/lists/manipulation/list-combinations">List Combinations</a></h3>
  <div class="solutions" id="problem65">
    Given two source lists (or sets), generate a list (or set) of all the pairs derived by combining elements from the individual lists (sets). E.g. given suites = <code>['H',&nbsp;'D',&nbsp;'C',&nbsp;'S']</code> and faces = <code>['2',&nbsp;'3',&nbsp;'4',&nbsp;'5',&nbsp;'6',&nbsp;'7',&nbsp;'8',&nbsp;'9',&nbsp;'10',&nbsp;'J',&nbsp;'Q',&nbsp;'K',&nbsp;'A']</code>, generate the deck of 52 cards, confirm the deck size and check it contains an expected card, say <code>'Ace&nbsp;of&nbsp;Hearts'</code>.
    
      
        
        
          <div class="ruby"><div class="code"><span class="type">ruby</span><div class="body">suites.each {|s| faces.each {|f| cards &lt;&lt; [s, f]}}<br>puts "Deck %s \'Ace of Hearts\'" % if cards.include?(['h', 'A']) then "contains" else "does not contain" end</div></div></div>
        
      
        
        
          <div class="java"><div class="code"><span class="type">java</span><div class="body">SortedSet&lt;AbstractMap.SimpleImmutableEntry&lt;String, String&gt; &gt; cards =<br>   new TreeSet&lt;AbstractMap.SimpleImmutableEntry&lt;String, String&gt; &gt;(new CardComparator());<br><br>for (String suite : suites)<br>   for (String face : faces)<br>      cards.add(new AbstractMap.SimpleImmutableEntry&lt;String, String&gt;(suite, face));<br><br>Boolean containsEntry = cards.contains(new AbstractMap.SimpleImmutableEntry&lt;String, String&gt;("h", "A"));<br><br>if (containsEntry) System.out.println("Deck contains 'Ace of Hearts'");<br>else System.out.println("'Ace of Hearts' not in deck");</div></div></div>
        
      
        
        
          <div class="perl"><div class="code"><span class="type">perl</span><div class="body">@suites = qw(H D C S);<br>@faces = qw(2 3 4 5 6 7 8 9 10 J Q K A);<br>@deck = map { $suite=$_; map $suite.$_, @faces; } @suites;<br>print 'checking deck size: ' . (@deck == 52 ? 'pass' : 'fail') . "\n";<br>print 'deck contains "Ace of Hearts": ' . (grep(/^HA$/, @deck) ? 'true' : 'false') . "\n";<br></div></div></div>
        
      
        
        
          <div class="groovy"><div class="code"><span class="type">groovy</span><div class="body">faces = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']<br>suites = ['H', 'D', 'C', 'S']<br>deck = [faces, suites].combinations()<br>assert deck.size() == 52<br>assert ['A', 'H'] in deck</div></div></div>
        
      
        
        
          <div class="scala"><div class="code"><span class="type">scala</span><div class="body">def product(set1 : List[_], set2 : List[_]) : List[Pair[_, _]] =<br>{<br>   val p = new mutable.ArrayBuffer[Pair[_, _]]()<br>   for (e1 &lt;- set1) for (e2 &lt;- set2) p += Pair(e1, e2)<br>   p.toList<br>}<br><br>// ------<br><br>val cards = product(suites, faces)<br><br>printf("Deck has %d cards\n", cards.length)<br>if (cards.contains(Pair("h", "A"))) println("Deck contains 'Ace of Hearts'")<br>else println("'Ace of Hearts' not in this deck")</div></div></div>
        
      
        
        
          <div class="python"><div class="code"><span class="type">python</span><div class="body">suites = ('H', 'D', 'C', 'S')<br>faces = ('2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A')<br>deck = [(face,suite) for suite in suites for face in faces]<br>assert len(deck) == 52<br>assert ('A', 'H') in deck<br></div></div></div>
        
      
        
        
          <div class="cpp"><div class="code"><span class="type">cpp</span><div class="body">Specialized::StringCollection^ cards = gcnew Specialized::StringCollection;<br><br>for each(String^ suite in suites)<br>   for each(String^ face in faces)<br>      cards-&gt;Add(makeCard(suite, face));<br><br>Console::WriteLine("Deck has {0} cards", cards.Count);<br>if (cards-&gt;Contains(makeCard("h", "A"))) Console::WriteLine("Deck contains 'Ace of hearts'"); else Console::WriteLine("'Ace of hearts' not in deck");</div><div class="body-multiple">auto suites = {"h", "d", "c", "s"};<br>auto faces = {"2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A"};<br>list&lt;card&gt; cards;<br><br>for (auto s: suites)<br>    for (auto f: faces)<br>        cards.push_back(make_pair(s,f));<br><br>cout &lt;&lt; "Deck has " &lt;&lt; cards.size() &lt;&lt; " cards." &lt;&lt; endl;<br><br>card ace_of_harts = make_pair("h", "A");<br>if (end(cards) != find_if(begin(cards), end(cards),<br>                          [&amp;](const card&amp; c) { return c == ace_of_harts; }))<br>    cout &lt;&lt; "Deck contain 'Ace of Harts'" &lt;&lt; endl;<br>else<br>    cout &lt;&lt; "Deck lacks 'Ace of Harts'" &lt;&lt; endl;</div></div></div>
        
      
        
        
          <div class="fsharp"><div class="code"><span class="type">fsharp</span><div class="body">let cards = (List.fold_left (fun acc suite -&gt; acc @ (List.map (fun face -&gt; (suite, face)) faces)) [] suites)<br><br>printfn "Deck has %d cards" (List.length cards)<br>printfn "%s" (if (List.exists (fun e -&gt; e = ("h", "A")) cards) then "Deck contains 'Ace of Hearts'" ; else "'Ace of Hearts' not in deck")</div><div class="body-multiple">let product (set1 : List&lt;'a&gt;) (set2 : List&lt;'a&gt;) : List&lt;'a * 'a&gt; = <br>    let p = new ResizeArray&lt;'a * 'a&gt;()<br>    for e1 in set1 do for e2 in set2 do p.Add(e1, e2) done done<br>    Array.to_list (p.ToArray())<br><br>// ------<br><br>let cards = product suites faces <br><br>printfn "Deck has %d cards" (List.length cards)<br>printfn "%s" (if (List.exists (fun e -&gt; e = ("h", "A")) cards) then "Deck contains 'Ace of Hearts'" ; else "'Ace of Hearts' not in deck")</div><div class="body-multiple">let deck = <br>    suites<br>    |&gt; List.map (fun s -&gt; faces |&gt; List.map (fun f -&gt; (s, f)))<br>    |&gt; List.concat<br><br>printfn "Deck has %d cards" (List.length deck)<br>match deck |&gt; List.exists (fun e -&gt; e = ("h", "A")) with<br>| true  -&gt; printfn "Deck contains 'Ace of Hearts'"<br>| _     -&gt; printfn "'Ace of Hearts' not in deck"</div></div></div>
        
      
        
        
          <div class="erlang"><div class="code"><span class="type">erlang</span><div class="body">Cards = lists:foldl(fun (Suite, Acc) -&gt; Acc ++ lists:flatmap(fun (Face) -&gt; [{Suite, Face}] end, Faces) end, [], Suites),<br><br>io:format("Deck has ~B cards~n", [length(Cards)]),<br>IsMember = lists:member({h, 'A'}, Cards),<br>io:format("~s~n", [if IsMember -&gt; "Deck contains 'Ace of Hearts'" ; true -&gt; "'Ace of Hearts' not in deck" end]),</div><div class="body-multiple">Cards = sofs:to_external(sofs:product(sofs:set(Suites), sofs:set(Faces))),<br><br>io:format("Deck has ~B cards~n", [length(Cards)]),<br>IsMember = lists:member({h, 'A'}, Cards),<br>io:format("~s~n", [if IsMember -&gt; "Deck contains 'Ace of Hearts'" ; true -&gt; "'Ace of Hearts' not in deck" end]),</div><div class="body-multiple">Deck2 = [{S, V} || S &lt;- [d, c, h, s], V &lt;- [2, 3, 4, 5, 6, 7, 8, 9, 10, 'J', 'Q', 'K', 'A']],<br>52 = length(Deck2),<br>true = lists:member({h, 'A'}, Deck2).<br><br></div></div></div>
        
      
        
        
          <div class="ocaml"><div class="code"><span class="type">ocaml</span><div class="body">let suites = ["H"; "D"; "C"; "S"]<br>let faces = ["2";"3";"4";"5";"6";"7";"8";"9";"10";"J";"Q";"K";"A"]<br><br>let desk =<br>  List.fold_left (fun acc y -&gt;<br>    List.fold_left (fun acc2 x -&gt;<br>      (x, y)::acc2<br>    ) acc faces<br>  ) [] suites<br><br>let () =<br>  assert (List.length desk = 52);<br>  if List.mem ("A", "H") desk<br>  then print_endline "Ace of Hearts found!"<br>  else print_endline "Ace of Hearts not found :("</div></div></div>
        
      
        
        
          <div class="csharp"><div class="code"><span class="type">csharp</span><div class="body">using System;<br>using System.Collections.Generic;<br>using System.Linq;<br><br>namespace Combinations<br>{<br>    class Program<br>    {<br>        public static void Main(string[] args)<br>        {<br>            // Define the given lists<br>            // Since List`1 implements the interface IEnumerable`1, this can easily be redefined as List`1.<br>            IEnumerable&lt;string&gt; suites = new string[] { "H", "D", "C", "S" };<br>            IEnumerable&lt;string&gt; faces = new string[] { "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A" };<br><br>            // LINQ Query to perform a Cartesian product and create an anonymous type to hold the results.<br>            // "var" is required to define this as an IEnumerable`1<br>            var deck =<br>                from suite in suites   // For each suite in suites<br>                from face in faces     // Match it with a face in face.<br>                select new<br>                {<br>                    Suite = suite,<br>                    Face = face<br>                };<br><br>            // Verify the count (uses LINQ extension)<br>            if (deck.Count() == 52)<br>            {<br>                Console.WriteLine("Count matches!");<br>            }<br><br>            // Verify that the Ace of Hearts is in the deck (uses LINQ extension)<br>            if (deck.Contains(new {Suite = "H", Face = "A"}))<br>            {<br>                Console.WriteLine("Ace of Hearts found!");<br>            }<br>            <br>            // Example of how to iterate through the list.<br>            // "var" here is required since we are using an anonymous type<br>            foreach(var card in deck)<br>            {<br>                Console.WriteLine("Suite: {0} Face: {1}", card.Suite, card.Face);<br>            }<br>            <br>            // If you desire to work with a List`1, you can convert this to a normal list at any time:<br>            Console.WriteLine("\nConverting to list!");<br>            var list = deck.ToList();<br>            Console.WriteLine("Suite: {0} Face: {1}", list[5].Suite, list[5].Face);<br>            Console.WriteLine("List count: {0}", list.Count);  // 52<br>            <br>            Console.ReadLine();<br>        }<br>    }<br>}</div></div></div>
        
      
        
        
          <div class="php"><div class="code"><span class="type">php</span><div class="body">foreach ($suites as $suite) {<br>	foreach ($faces as $face) {<br>		$cards[] = $suite.$face;<br>	}<br>}<br>if (count($cards) == 52) {<br>	echo "The deck have all 52 cards.\n";<br>}<br>if (in_array("HA", $cards)) {<br>	echo "The deck contains 'Ace of Heart'\n";<br>} else {<br>	echo "The deck doesn't contain 'Ace of Heart'\n";<br>}</div></div></div>
        
      
        
        
          <div class="haskell"><div class="code"><span class="type">haskell</span><div class="body">import Data.List<br><br>suites = ["H", "D", "C", "S"] <br>faces = ["2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A"]<br><br>main = do<br>  let cards = [(s,f) | s &lt;- suites, f &lt;- faces ]<br>  print (length cards)<br>  print $ hasCard ("H", "A") "Ace of Hearts" cards<br>  where hasCard t name cards = (if elem t cards then "Contains " <br>                               else "Does not contain") ++ name   </div></div></div>
        
      
        
        
          <div class="clojure"><div class="code"><span class="type">clojure</span><div class="body">(def suites ["H" "D" "C" "S"])<br>(def faces [2 3 4 5 6 7 8 9 10 "J" "Q" "K" "A"])<br>(defn listCards [] (for [s suites f faces] [f s]))<br>(some (partial = ["A" "H"]) (listCards))<br>; -&gt; true<br>(count (listCards))<br>; -&gt; 52</div></div></div>
        
      
        
        
          <div class="fantom"><div class="code"><span class="type">fantom</span><div class="body">r := [,]<br>["2","3","4","5","6","7","8","9","10","J","Q","K","A"].each |Str c| <br>{ ["H","D","C","S"].each |Str s| { r.add([c,s]) } }<br><br>q := ["A","H"]<br>result := r.contains(q)<br>echo("Deck size=${r.size}, contains $q? -&gt; $result") </div></div></div>
        
      
        
        
      
    
  </div>
</div><div class="problem">
  <h3><a href="http://langref.org/all-languages/lists/manipulation/perform-an-operation-on-every-item-of-a-list">Perform an operation on every item of a list</a></h3>
  <div class="solutions" id="problem85">
    Perform an operation on every item of a list, e.g.
<br>for the list <code>["ox",&nbsp;"cat",&nbsp;"deer",&nbsp;"whale"]</code> calculate
<br>the list of sizes of the strings, e.g. <code>[2,&nbsp;3,&nbsp;4,&nbsp;5]</code>
    
      
        
        
          <div class="ruby"><div class="code"><span class="type">ruby</span><div class="body">["ox", "cat", "deer", "whale"].map{|i| i.length}</div></div></div>
        
      
        
        
          <div class="java"><div class="code"><span class="type">java</span><div class="body">public class SolutionXX {<br>    public static void main(String[] args) {<br>       String[] list = {"ox", "cat", "deer", "whale"};<br>       for (String str : list) {<br>          System.out.println(str.length() + " ");<br>       }<br>    }<br>}<br></div></div></div>
        
      
        
        
          <div class="perl"><div class="code"><span class="type">perl</span><div class="body">my @list = qw{ox cat deer whale};<br><br>my @lengths = map {length($_)} @list;<br><br>print "@list\n";<br>print "@lengths\n";</div></div></div>
        
      
        
        
          <div class="groovy"><div class="code"><span class="type">groovy</span><div class="body">animals = ["ox", "cat", "deer", "whale"]<br>assert animals*.size() == [2, 3, 4, 5]</div><div class="body-multiple">// or somewhat more verbosely, using collect<br>animals = ["ox", "cat", "deer", "whale"]<br>assert animals.collect { it.size() } == [2, 3, 4, 5]</div></div></div>
        
      
        
        
          <div class="scala"><div class="code"><span class="type">scala</span><div class="body"><br>val sizes = List("ox", "cat", "deer", "whale") map {_ size}<br>assert(sizes == List(2, 3, 4, 5))  <br></div></div></div>
        
      
        
        
          <div class="python"><div class="code"><span class="type">python</span><div class="body">print map(lambda x: len(x), ["ox", "cat", "deer", "whale"])<br></div><div class="body-multiple">print [len(x) for x in ['ox', 'cat', 'deer', 'whale']]</div></div></div>
        
      
        
        
          <div class="cpp"><div class="code"><span class="type">cpp</span><div class="body">list&lt;string&gt; words;<br><br>words.push_back("ox");<br>words.push_back("cat");<br>words.push_back("deer");<br>words.push_back("whale");<br><br>for (list&lt;string&gt;::iterator it = words.begin(); it != words.end(); ++it)<br>    cout &lt;&lt; it-&gt;size() &lt;&lt; ' ';<br>cout &lt;&lt; endl;</div><div class="body-multiple">auto words = { "ox", "cat", "deer", "whale" };<br>list&lt;size_t&gt; word_sizes;<br><br>transform(begin(words),<br>          end(words),<br>          back_inserter(word_sizes),<br>          [](const string&amp; s) { return s.size(); });</div></div></div>
        
      
        
        
          <div class="fsharp"><div class="code"><span class="type">fsharp</span><div class="body">let lengths = List.map String.length ["ox"; "cat"; "deer"; "whale"]</div></div></div>
        
      
        
        
          <div class="erlang"><div class="code"><span class="type">erlang</span><div class="body">lists:map(fun (X) -&gt;length(X) end, List).</div></div></div>
        
      
        
        
          <div class="ocaml"><div class="code"><span class="type">ocaml</span><div class="body">List.map String.length ["ox"; "cat"; "deer"; "whale"];;</div></div></div>
        
      
        
        
          <div class="csharp"><div class="code"><span class="type">csharp</span><div class="body">using System.Collections.Generic;<br>public class OperationOnEach {<br>    public static void Main() {<br>        var list = new List&lt;string&gt;() { "ox", "cat", "deer", "whale" };<br>        list.ForEach( System.Console.WriteLine );<br>    }<br>}</div></div></div>
        
      
        
        
          <div class="php"><div class="code"><span class="type">php</span><div class="body">$sizes = array_map('strlen', array('ox', 'cat', 'deer', 'whale'));</div></div></div>
        
      
        
        
          <div class="haskell"><div class="code"><span class="type">haskell</span><div class="body">map length ["ox", "cat", "deer", "whale"]</div></div></div>
        
      
        
        
          <div class="clojure"><div class="code"><span class="type">clojure</span><div class="body">(map count ["ox" "cat" "deer" "whale"])</div></div></div>
        
      
        
        
          <div class="fantom"><div class="code"><span class="type">fantom</span><div class="body">["ox", "cat", "deer", "whale"].map { it.size }     </div></div></div>
        
      
        
        
      
    
  </div>
</div><div class="problem">
  <h3><a href="http://langref.org/all-languages/lists/manipulation/numbers-and-non-numbers">Split a list of things into numbers and non-numbers</a></h3>
  <div class="solutions" id="problem86">
    Given a list that might contain e.g. a string, an integer, a float and a date,
<br>split the list into numbers and non-numbers.
    
      
        
        
          <div class="ruby"><div class="code"><span class="type">ruby</span><div class="body">now=Time.now<br>things=["hello", 25, 3.14, now]<br><br>numbers=things.select{|i| i.is_a? Numeric}<br>others=things-numbers</div><div class="body-multiple">now=Time.now<br>things=["hello", 25, 3.14, now]<br><br>numbers, others=things.partition{|i| i.is_a? Numeric}</div></div></div>
        
      
        
        
          <div class="java"><div class="code"><span class="type">java</span><div class="body">public class NumbersSolution {<br>    public static void main(String[] args) {<br>        List&lt;Object&gt; items = Arrays.asList(new Object[] { new Date(), 12L, 15.4, 99, "x" } ) ;<br>        List&lt;Object&gt; numbers = new ArrayList&lt;Object&gt;() ;<br>        List&lt;Object&gt; nonNumbers = new ArrayList&lt;Object&gt;() ;<br>        for (Object item : items ) <br>            (item instanceof Number ? numbers : nonNumbers).add(item) ;<br>    }<br>}<br></div><div class="body-multiple">public class NumbersSolution {<br>    public static void main() {<br>            List&lt;Object&gt; numbers = new ArrayList&lt;Object&gt;() ;<br>            List&lt;Object&gt; nonNumbers = new ArrayList&lt;Object&gt;() ;<br>            for (Object item : new Object[] { new Date(), 12L, 15.4, 99, "x" } ) <br>                (item instanceof Number ? numbers : nonNumbers).add(item) ; <br>    }<br>}<br></div></div></div>
        
      
        
        
          <div class="perl"><div class="code"><span class="type">perl</span><div class="body">use Scalar::Util qw(looks_like_number);<br>my @things = ('hello',25,3.14,scalar(localtime(time)));<br>my @numbers;<br>my @others;<br>for ( @things ) {<br>    if ( looks_like_number $_ ) {<br>        push @numbers, $_;<br>    } else {<br>        push @other, $_;<br>    }<br>}</div></div></div>
        
      
        
        
          <div class="groovy"><div class="code"><span class="type">groovy</span><div class="body">now = new Date()<br>things = ["hello", 25, 3.14, now]<br>(numbers, others) = things.split{ it instanceof Number }<br>assert numbers == [25, 3.14]<br>assert others == ["hello", now]<br></div></div></div>
        
      
        
        
          <div class="scala"><div class="code"><span class="type">scala</span><div class="body">val now = new java.util.Date()<br>val result = List("hello", 25, 3.14, now) partition { _.isInstanceOf[Number] }<br>assert(result == (List(25, 3.14), List("hello", now)))<br>  </div></div></div>
        
      
        
        
          <div class="python"><div class="code"><span class="type">python</span><div class="body">import re<br>data = '34234aff340980adf0e0fa0fefl' ## or ''.join(array)<br><br>nonDigits =  re.findall(re.compile('\D'), data)<br>digits = re.findall(re.compile('\d'), data)<br><br><br></div></div></div>
        
      
        
        
          <div class="cpp"><div class="code"><span class="type">cpp</span><div class="body">typedef variant&lt;int,float,string,date&gt; dynamic;<br><br>class is_number : public static_visitor&lt;bool&gt;<br>{<br>public:<br>    bool operator()(int &amp;) const {<br>        return true;<br>    }<br>    bool operator()(float &amp;) const {<br>        return true;<br>    }<br>    bool operator()(string &amp;) const {<br>        return false;<br>    }<br>    bool operator()(date &amp;) const {<br>        return false;<br>    }<br>};<br><br>int main()<br>{<br>    list&lt;dynamic&gt; lst;<br>    list&lt;dynamic&gt; numbers;<br>    list&lt;dynamic&gt; non_numbers;<br><br>    lst += "hello", 3.14f, 42, date(2011,Aug,23);<br><br>    BOOST_FOREACH(dynamic v, lst)<br>        if (apply_visitor(is_number(), v))<br>            numbers += v;<br>        else<br>            non_numbers += v;</div><div class="body-multiple">#include &lt;iostream&gt;<br>#include &lt;list&gt;<br><br>#include &lt;boost/any.hpp&gt;<br>#include &lt;boost/date_time/gregorian/gregorian.hpp&gt;<br>#include &lt;boost/foreach.hpp&gt;<br><br>using namespace boost;<br>using namespace boost::gregorian;<br>using namespace std;<br><br>int main()<br>{<br>    list&lt;any&gt; lst;<br>    list&lt;any&gt; numbers;<br>    list&lt;any&gt; non_numbers;<br><br>    lst.push_back(string("hello"));<br>    lst.push_back(42);<br>    lst.push_back(3.14f);<br>    lst.push_back(date(day_clock::local_day()));<br><br>    BOOST_FOREACH(const any &amp;a, lst)<br>        try<br>        {<br>            numbers.push_back(any_cast&lt;int&gt;(a));<br>        }<br>        catch (bad_any_cast &amp;e)<br>        {<br>            try<br>            {<br>                numbers.push_back(any_cast&lt;float&gt;(a));<br>            }<br>            catch (bad_any_cast &amp;e)<br>            {<br>                non_numbers.push_back(a);<br>            }<br>        }<br><br>    // float and int are now in 'numbers' and the rest in 'non_numbers'                                                                                                                                                                     <br>}<br></div></div></div>
        
      
        
        
          <div class="fsharp"><div class="code"><span class="type">fsharp</span><div class="body">let (things:obj list) = [ "hello"; 25; 3.14; System.DateTime.Now ]<br><br>let isNumber (x:obj) =<br>    match x with<br>    | :? int | :? float | :? byte | :? decimal | :? int16 | :? int64  -&gt; true<br>    | _ -&gt; false<br><br>let numbers, nonNumbers = things |&gt; List.partition isNumber</div></div></div>
        
      
        
        
          <div class="erlang"><div class="code"><span class="type">erlang</span><div class="body">% Wrapped call to the auxiliary function<br>number_split(Xs) -&gt;<br>  number_split(Xs, [], []).<br><br>% The auxiliary function<br>number_split([], Num, NonNum) -&gt;<br>  {Num, NonNum};<br>number_split([X|Xs], Num, NonNum) -&gt;<br>  case is_number(X) of<br>    true -&gt;<br>      number_split(Xs, [X|Num], NonNum);<br>    false -&gt;<br>      number_split(Xs, Num, [X|NonNum])<br>  end.</div><div class="body-multiple">List = ["hello", 25, 3.14, calendar:local_time()],<br>{Numbers, NonNumbers} = lists:partition(fun(E) -&gt; is_number(E) end, List)</div></div></div>
        
      
        
        
          <div class="ocaml"><div class="code"><span class="type">ocaml</span><div class="body">(* OCaml is a strongly statically typed language so it is not possible to mix<br>   items of different types in a single list.<br>   So here we use a list of strings, some of these strings represent a number *)<br> <br>let is_a_number v =<br>  try ignore(float_of_string v); true<br>  with _ -&gt; false<br><br>let numbers, others =<br>  List.partition is_a_number ["Joe"; "3.14"; "8"; "hello"; "23/04/2009"]<br><br>(* ========================================================================== *)<br>(* If we really want to mix items of several types, we can declare a variant: *)<br><br>type item = Int of int | Float of float | String of string | Char of char<br><br>let is_a_number = function<br>  | Float _ | Int _ -&gt; true<br>  | String _ | Char _ -&gt; false<br><br>let numbers, others =<br>  List.partition is_a_number [String "Joe"; Float 3.14; Int 8; Char 'Z']</div></div></div>
        
      
        
        
          <div class="csharp"><div class="code"><span class="type">csharp</span><div class="body">using System;<br>using System.Collections.Generic;<br>using System.Linq;<br><br>// AFAIK, there just isn't a good way to do this in C#<br>public class ListSplitter {<br>    public static bool IsNumeric(object o) {<br>        var d = new Decimal();<br>        return decimal.TryParse(o.ToString(), out d);<br>    }<br>    public static void Main() {<br>        var list = new List&lt;object&gt;() { "foo", DateTime.Now, 1, "bar", 2.4 };<br><br>        // the Where method does the work...<br>        var numbers = list.Where( el =&gt; IsNumeric(el) );<br>        var nonNumbers = list.Where( el =&gt; ! IsNumeric(el) );<br>    }<br><br>}<br></div></div></div>
        
      
        
        
          <div class="php"><div class="code"><span class="type">php</span><div class="body">$now = new DateTime();<br>$things = array('hello', 25, 3.14, $now);<br>$numbers = array_filter($things, 'is_numeric');<br>$others = array();<br>foreach ($things as $thing) {<br>    if (!in_array($thing, $numbers)) {<br>        $others[] = $thing;<br>    }<br>}<br></div></div></div>
        
      
        
        
          <div class="haskell"><div class="code"><span class="type">haskell</span><div class="body">import Data.List (partition)<br><br>type Date = String<br>data Things = TS String | TI Int | TD Date<br>            deriving Show<br><br>main = do<br>  let myList = [TI 1, TI 23, TS "Joe", TD "23/04/2009"]<br>  print $ partition isNumber myList<br><br>  where isNumber (TS _) = False<br>        isNumber (TI _) = True<br>        isNumber (TD _) = False</div></div></div>
        
      
        
        
          <div class="clojure"><div class="code"><span class="type">clojure</span><div class="body">(def jumble [3 "Bill" 5.7 '("A" "B" "C")]) ; int, string, float, list<br><br>(defn numberNonNumberSorter [jumbledList]<br>  (if (empty? jumbledList)<br>    (hash-map :numbers [], :nonnumbers []) ; recursion base case - return two empty lists<br>    (let [head (first jumbledList)] ; let &lt;head&gt; be the first element in the list<br>      (let [tailresult (numberNonNumberSorter (rest jumbledList))] ; tailresult applies recursively to the remainder<br>        (if (number? head) ; is head a number?<br>          (hash-map<br>            :numbers (cons head (tailresult :numbers)) ; add &lt;head&gt; to the numbers<br>            :nonnumbers (tailresult :nonnumbers)) ; leave nonnumbers the same<br>          (hash-map<br>            :numbers (tailresult :numbers) ; leave numbers the same<br>            :nonnumbers (cons head (tailresult :nonnumbers))) ; add &lt;head&gt; to nonnumbers<br>          )<br>        )<br>      )<br>    )<br>  )<br><br>(println (numberNonNumberSorter jumble))<br><br>; -&gt; {:nonnumbers (Bill (A B C)), :numbers (3 5.7)}</div><div class="body-multiple">(group-by number? ["hello" 42 3.14 (Date.)])</div></div></div>
        
      
        
        
          <div class="fantom"><div class="code"><span class="type">fantom</span><div class="body">things := ["hello", 25, 3.14, Time.now]<br>numbers := things.findType(Num#)<br>nonNumbers := things.exclude { numbers.contains(it) }  </div></div></div>
        
      
        
        
      
    
  </div>
</div>
  </div>
<div class="subcategory">
      <div class="box">
      <b class="rtop">
        <b class="r1"></b> <b class="r2"></b> <b class="r3"></b> <b class="r4"></b>
      </b>
      <div class="content">

    <a href="http://langref.org/all-languages/lists/testing">Testing</a>
        </div>
      <b class="rbottom">
        <b class="r4"></b> <b class="r3"></b> <b class="r2"></b> <b class="r1"></b>
      </b>
    </div>

</div>
<div style="clear:both">
  <div id="subcategory46">
    <div class="problem">
  <h3><a href="http://langref.org/all-languages/lists/testing/all">Test if a condition holds for all items of a list</a></h3>
  <div class="solutions" id="problem102">
    Given a list, test if a certain logical condition (i.e. predicate) holds for all items of the list.
    
      
        
        
          <div class="ruby"><div class="code"><span class="type">ruby</span><div class="body">[2, 3, 4].all? { |x| x &gt; 1 }</div></div></div>
        
      
        
        
      
        
        
      
        
        
          <div class="groovy"><div class="code"><span class="type">groovy</span><div class="body">[2,3,4].every{it &gt; 1}</div></div></div>
        
      
        
        
          <div class="scala"><div class="code"><span class="type">scala</span><div class="body">List(2, 3, 4).forall { _ &gt; 1 }  </div><div class="body-multiple">List(2, 3, 4).forall { x =&gt; x &gt; 1 }</div></div></div>
        
      
        
        
          <div class="python"><div class="code"><span class="type">python</span><div class="body">all(x &gt; 1 for x in [2,3,4])</div></div></div>
        
      
        
        
          <div class="cpp"><div class="code"><span class="type">cpp</span><div class="body">template &lt;typename InputIterator, typename Predicate&gt;<br>bool match_all(InputIterator first, InputIterator last, Predicate pred)<br>{<br>    return find_if(first, last, !pred(_1)) == last;<br>}</div></div></div>
        
      
        
        
          <div class="fsharp"><div class="code"><span class="type">fsharp</span><div class="body">let rec IsAll predicate source = <br>    let mutable acc = true<br>    for e in source do<br>        acc &lt;- acc &amp;&amp; (predicate e)<br>    acc</div></div></div>
        
      
        
        
          <div class="erlang"><div class="code"><span class="type">erlang</span><div class="body">Result = lists:all(Pred, List).</div></div></div>
        
      
        
        
          <div class="ocaml"><div class="code"><span class="type">ocaml</span><div class="body">(* from the interactive loop *)<br># List.for_all (fun x -&gt; x &gt; 1) [2; 3; 4] ;;<br>- : bool = true</div></div></div>
        
      
        
        
      
        
        
      
        
        
          <div class="haskell"><div class="code"><span class="type">haskell</span><div class="body"><br>all (&gt; 1) [2, 3, 4]</div></div></div>
        
      
        
        
          <div class="clojure"><div class="code"><span class="type">clojure</span><div class="body">(every? #(&gt; % 1) [2 3 4])</div></div></div>
        
      
        
        
          <div class="fantom"><div class="code"><span class="type">fantom</span><div class="body">echo([2,3,4].all{ it&gt;1 }) </div></div></div>
        
      
        
        
      
    
  </div>
</div><div class="problem">
  <h3><a href="http://langref.org/all-languages/lists/testing/any">Test if a condition holds for any items of a list</a></h3>
  <div class="solutions" id="problem103">
    Given a list, test if a certain logical condition (i.e. predicate) holds for any items of the list. 
    
      
        
        
          <div class="ruby"><div class="code"><span class="type">ruby</span><div class="body">[2, 3, 4].any? { |x| x &gt; 3 }</div></div></div>
        
      
        
        
      
        
        
      
        
        
          <div class="groovy"><div class="code"><span class="type">groovy</span><div class="body">[2,3,4].any{it &gt; 3}<br></div></div></div>
        
      
        
        
          <div class="scala"><div class="code"><span class="type">scala</span><div class="body">List(2, 3, 4).exists { _ &gt; 3 }</div><div class="body-multiple">List(2, 3, 4).exists { x =&gt; x &gt; 3 }  </div></div></div>
        
      
        
        
          <div class="python"><div class="code"><span class="type">python</span><div class="body">any(x &gt; 3 for x in [2, 3, 4])</div></div></div>
        
      
        
        
          <div class="cpp"><div class="code"><span class="type">cpp</span><div class="body">template &lt;typename InputIterator, typename Predicate&gt;<br>bool match_any(InputIterator first, InputIterator last, Predicate pred)<br>{<br>    return find_if(first, last, pred) != last;<br>}</div></div></div>
        
      
        
        
          <div class="fsharp"><div class="code"><span class="type">fsharp</span><div class="body">let rec IsAny predicate source =<br>        match source with<br>        | [] -&gt; false<br>        | h::t -&gt; <br>        if (predicate h) then true<br>        else (IsAny predicate t )</div></div></div>
        
      
        
        
          <div class="erlang"><div class="code"><span class="type">erlang</span><div class="body">Result = lists:any(Pred, List).		</div></div></div>
        
      
        
        
          <div class="ocaml"><div class="code"><span class="type">ocaml</span><div class="body">(* from the interactive loop: *)<br># List.exists (fun x -&gt; x &gt; 3) [2; 3; 4] ;;<br>- : bool = true</div></div></div>
        
      
        
        
      
        
        
      
        
        
          <div class="haskell"><div class="code"><span class="type">haskell</span><div class="body">any (&gt; 1) [1, 2, 3]</div></div></div>
        
      
        
        
          <div class="clojure"><div class="code"><span class="type">clojure</span><div class="body">; The standard library in Clojure has "not-any?" but (oddly enough) no "any?" <br>(defn any? [pred coll] <br>    ((complement not-any?) pred coll))<br><br>(any? #(&gt; % 3) [2 3 4])<br></div><div class="body-multiple">(some #(&gt; % 3) [2 3 4])</div></div></div>
        
      
        
        
          <div class="fantom"><div class="code"><span class="type">fantom</span><div class="body">echo([2,3,4].any{ it==4 })</div></div></div>
        
      
        
        
      
    
  </div>
</div>
  </div>

</div>


  <div id="footer">
        <div class="box">
      <b class="rtop">
        <b class="r1"></b> <b class="r2"></b> <b class="r3"></b> <b class="r4"></b>
      </b>
      <div class="content">

      <a href="http://langref.org/submit/lists">submit problem</a> | 
      <a href="mailto:rob@langref.org">contact</a> | 
      
      sponsored by <a href="http://refactor.com.au/"><img alt="Refactor-small" border="0" src="./langref.org - ruby, java, perl, groovy ... - Lists_files/refactor-small.png" style="vertical-align:middle; padding-bottom:5px"></a>
          </div>
      <b class="rbottom">
        <b class="r4"></b> <b class="r3"></b> <b class="r2"></b> <b class="r1"></b>
      </b>
    </div>

  </div> 
</div>
      <script src="./langref.org - ruby, java, perl, groovy ... - Lists_files/urchin.js" type="text/javascript">
      </script>
      <script type="text/javascript">
      _uacct = "UA-4264032-1";
      _udn = "langref.org";
      urchinTracker();
      </script>
 
</div></div></div></div></div></div><div id="yieldsquare-ad" class="yieldsquare-enabled" style="display: none; clear: both;"><iframe id="yieldsquare-frame" frameborder="0" width="0" height="0" src="about:blank" style="margin: 0px; overflow: hidden; display: none !important; visibility: hidden !important; opacity: 0 !important; background-position: 0px 0px;"></iframe><div id="yieldsquare-about-ad">This ad is supporting your extension Smooth Gestures<a id="yieldsquare-disable-ad" href="http://langref.org/all-languages/undefined">Turn off these ads?</a></div></div></body></html>